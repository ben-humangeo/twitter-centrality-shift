/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thehumangeo.twitter.centrality.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatusEntitiesUrls implements org.apache.thrift.TBase<StatusEntitiesUrls, StatusEntitiesUrls._Fields>, java.io.Serializable, Cloneable, Comparable<StatusEntitiesUrls> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusEntitiesUrls");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPANDED_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("expandedUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DISPLAY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("displayUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("indices", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusEntitiesUrlsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusEntitiesUrlsTupleSchemeFactory());
  }

  public String url; // required
  public String expandedUrl; // required
  public String displayUrl; // required
  public List<Integer> indices; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URL((short)1, "url"),
    EXPANDED_URL((short)2, "expandedUrl"),
    DISPLAY_URL((short)3, "displayUrl"),
    INDICES((short)4, "indices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // EXPANDED_URL
          return EXPANDED_URL;
        case 3: // DISPLAY_URL
          return DISPLAY_URL;
        case 4: // INDICES
          return INDICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPANDED_URL, new org.apache.thrift.meta_data.FieldMetaData("expandedUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_URL, new org.apache.thrift.meta_data.FieldMetaData("displayUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDICES, new org.apache.thrift.meta_data.FieldMetaData("indices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusEntitiesUrls.class, metaDataMap);
  }

  public StatusEntitiesUrls() {
  }

  public StatusEntitiesUrls(
    String url,
    String expandedUrl,
    String displayUrl,
    List<Integer> indices)
  {
    this();
    this.url = url;
    this.expandedUrl = expandedUrl;
    this.displayUrl = displayUrl;
    this.indices = indices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusEntitiesUrls(StatusEntitiesUrls other) {
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetExpandedUrl()) {
      this.expandedUrl = other.expandedUrl;
    }
    if (other.isSetDisplayUrl()) {
      this.displayUrl = other.displayUrl;
    }
    if (other.isSetIndices()) {
      List<Integer> __this__indices = new ArrayList<Integer>(other.indices);
      this.indices = __this__indices;
    }
  }

  public StatusEntitiesUrls deepCopy() {
    return new StatusEntitiesUrls(this);
  }

  @Override
  public void clear() {
    this.url = null;
    this.expandedUrl = null;
    this.displayUrl = null;
    this.indices = null;
  }

  public String getUrl() {
    return this.url;
  }

  public StatusEntitiesUrls setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getExpandedUrl() {
    return this.expandedUrl;
  }

  public StatusEntitiesUrls setExpandedUrl(String expandedUrl) {
    this.expandedUrl = expandedUrl;
    return this;
  }

  public void unsetExpandedUrl() {
    this.expandedUrl = null;
  }

  /** Returns true if field expandedUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetExpandedUrl() {
    return this.expandedUrl != null;
  }

  public void setExpandedUrlIsSet(boolean value) {
    if (!value) {
      this.expandedUrl = null;
    }
  }

  public String getDisplayUrl() {
    return this.displayUrl;
  }

  public StatusEntitiesUrls setDisplayUrl(String displayUrl) {
    this.displayUrl = displayUrl;
    return this;
  }

  public void unsetDisplayUrl() {
    this.displayUrl = null;
  }

  /** Returns true if field displayUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayUrl() {
    return this.displayUrl != null;
  }

  public void setDisplayUrlIsSet(boolean value) {
    if (!value) {
      this.displayUrl = null;
    }
  }

  public int getIndicesSize() {
    return (this.indices == null) ? 0 : this.indices.size();
  }

  public java.util.Iterator<Integer> getIndicesIterator() {
    return (this.indices == null) ? null : this.indices.iterator();
  }

  public void addToIndices(int elem) {
    if (this.indices == null) {
      this.indices = new ArrayList<Integer>();
    }
    this.indices.add(elem);
  }

  public List<Integer> getIndices() {
    return this.indices;
  }

  public StatusEntitiesUrls setIndices(List<Integer> indices) {
    this.indices = indices;
    return this;
  }

  public void unsetIndices() {
    this.indices = null;
  }

  /** Returns true if field indices is set (has been assigned a value) and false otherwise */
  public boolean isSetIndices() {
    return this.indices != null;
  }

  public void setIndicesIsSet(boolean value) {
    if (!value) {
      this.indices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case EXPANDED_URL:
      if (value == null) {
        unsetExpandedUrl();
      } else {
        setExpandedUrl((String)value);
      }
      break;

    case DISPLAY_URL:
      if (value == null) {
        unsetDisplayUrl();
      } else {
        setDisplayUrl((String)value);
      }
      break;

    case INDICES:
      if (value == null) {
        unsetIndices();
      } else {
        setIndices((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case EXPANDED_URL:
      return getExpandedUrl();

    case DISPLAY_URL:
      return getDisplayUrl();

    case INDICES:
      return getIndices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case EXPANDED_URL:
      return isSetExpandedUrl();
    case DISPLAY_URL:
      return isSetDisplayUrl();
    case INDICES:
      return isSetIndices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatusEntitiesUrls)
      return this.equals((StatusEntitiesUrls)that);
    return false;
  }

  public boolean equals(StatusEntitiesUrls that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_expandedUrl = true && this.isSetExpandedUrl();
    boolean that_present_expandedUrl = true && that.isSetExpandedUrl();
    if (this_present_expandedUrl || that_present_expandedUrl) {
      if (!(this_present_expandedUrl && that_present_expandedUrl))
        return false;
      if (!this.expandedUrl.equals(that.expandedUrl))
        return false;
    }

    boolean this_present_displayUrl = true && this.isSetDisplayUrl();
    boolean that_present_displayUrl = true && that.isSetDisplayUrl();
    if (this_present_displayUrl || that_present_displayUrl) {
      if (!(this_present_displayUrl && that_present_displayUrl))
        return false;
      if (!this.displayUrl.equals(that.displayUrl))
        return false;
    }

    boolean this_present_indices = true && this.isSetIndices();
    boolean that_present_indices = true && that.isSetIndices();
    if (this_present_indices || that_present_indices) {
      if (!(this_present_indices && that_present_indices))
        return false;
      if (!this.indices.equals(that.indices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatusEntitiesUrls other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpandedUrl()).compareTo(other.isSetExpandedUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpandedUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expandedUrl, other.expandedUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayUrl()).compareTo(other.isSetDisplayUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayUrl, other.displayUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndices()).compareTo(other.isSetIndices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indices, other.indices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatusEntitiesUrls(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expandedUrl:");
    if (this.expandedUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.expandedUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayUrl:");
    if (this.displayUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.displayUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("indices:");
    if (this.indices == null) {
      sb.append("null");
    } else {
      sb.append(this.indices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (expandedUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expandedUrl' was not present! Struct: " + toString());
    }
    if (displayUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayUrl' was not present! Struct: " + toString());
    }
    if (indices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'indices' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusEntitiesUrlsStandardSchemeFactory implements SchemeFactory {
    public StatusEntitiesUrlsStandardScheme getScheme() {
      return new StatusEntitiesUrlsStandardScheme();
    }
  }

  private static class StatusEntitiesUrlsStandardScheme extends StandardScheme<StatusEntitiesUrls> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusEntitiesUrls struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPANDED_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expandedUrl = iprot.readString();
              struct.setExpandedUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISPLAY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayUrl = iprot.readString();
              struct.setDisplayUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.indices = new ArrayList<Integer>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  int _elem18;
                  _elem18 = iprot.readI32();
                  struct.indices.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setIndicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusEntitiesUrls struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.expandedUrl != null) {
        oprot.writeFieldBegin(EXPANDED_URL_FIELD_DESC);
        oprot.writeString(struct.expandedUrl);
        oprot.writeFieldEnd();
      }
      if (struct.displayUrl != null) {
        oprot.writeFieldBegin(DISPLAY_URL_FIELD_DESC);
        oprot.writeString(struct.displayUrl);
        oprot.writeFieldEnd();
      }
      if (struct.indices != null) {
        oprot.writeFieldBegin(INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.indices.size()));
          for (int _iter19 : struct.indices)
          {
            oprot.writeI32(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusEntitiesUrlsTupleSchemeFactory implements SchemeFactory {
    public StatusEntitiesUrlsTupleScheme getScheme() {
      return new StatusEntitiesUrlsTupleScheme();
    }
  }

  private static class StatusEntitiesUrlsTupleScheme extends TupleScheme<StatusEntitiesUrls> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusEntitiesUrls struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.url);
      oprot.writeString(struct.expandedUrl);
      oprot.writeString(struct.displayUrl);
      {
        oprot.writeI32(struct.indices.size());
        for (int _iter20 : struct.indices)
        {
          oprot.writeI32(_iter20);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusEntitiesUrls struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.expandedUrl = iprot.readString();
      struct.setExpandedUrlIsSet(true);
      struct.displayUrl = iprot.readString();
      struct.setDisplayUrlIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.indices = new ArrayList<Integer>(_list21.size);
        for (int _i22 = 0; _i22 < _list21.size; ++_i22)
        {
          int _elem23;
          _elem23 = iprot.readI32();
          struct.indices.add(_elem23);
        }
      }
      struct.setIndicesIsSet(true);
    }
  }

}

