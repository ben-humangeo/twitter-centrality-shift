/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thehumangeo.twitter.centrality.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SearchMetadata implements org.apache.thrift.TBase<SearchMetadata, SearchMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<SearchMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchMetadata");

  private static final org.apache.thrift.protocol.TField COMPLETED_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("completedIn", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("maxId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_ID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("maxIdString", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NEXT_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("nextResults", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REFRESH_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SINCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sinceId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SINCE_ID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("sinceIdString", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchMetadataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchMetadataTupleSchemeFactory());
  }

  public double completedIn; // required
  public long maxId; // required
  public String maxIdString; // required
  public String nextResults; // required
  public String query; // required
  public String refreshUrl; // required
  public int count; // required
  public long sinceId; // required
  public String sinceIdString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPLETED_IN((short)1, "completedIn"),
    MAX_ID((short)2, "maxId"),
    MAX_ID_STRING((short)3, "maxIdString"),
    NEXT_RESULTS((short)4, "nextResults"),
    QUERY((short)5, "query"),
    REFRESH_URL((short)6, "refreshUrl"),
    COUNT((short)7, "count"),
    SINCE_ID((short)8, "sinceId"),
    SINCE_ID_STRING((short)9, "sinceIdString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPLETED_IN
          return COMPLETED_IN;
        case 2: // MAX_ID
          return MAX_ID;
        case 3: // MAX_ID_STRING
          return MAX_ID_STRING;
        case 4: // NEXT_RESULTS
          return NEXT_RESULTS;
        case 5: // QUERY
          return QUERY;
        case 6: // REFRESH_URL
          return REFRESH_URL;
        case 7: // COUNT
          return COUNT;
        case 8: // SINCE_ID
          return SINCE_ID;
        case 9: // SINCE_ID_STRING
          return SINCE_ID_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPLETEDIN_ISSET_ID = 0;
  private static final int __MAXID_ISSET_ID = 1;
  private static final int __COUNT_ISSET_ID = 2;
  private static final int __SINCEID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPLETED_IN, new org.apache.thrift.meta_data.FieldMetaData("completedIn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_ID, new org.apache.thrift.meta_data.FieldMetaData("maxId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_ID_STRING, new org.apache.thrift.meta_data.FieldMetaData("maxIdString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("nextResults", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_URL, new org.apache.thrift.meta_data.FieldMetaData("refreshUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SINCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sinceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SINCE_ID_STRING, new org.apache.thrift.meta_data.FieldMetaData("sinceIdString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchMetadata.class, metaDataMap);
  }

  public SearchMetadata() {
  }

  public SearchMetadata(
    double completedIn,
    long maxId,
    String maxIdString,
    String nextResults,
    String query,
    String refreshUrl,
    int count,
    long sinceId,
    String sinceIdString)
  {
    this();
    this.completedIn = completedIn;
    setCompletedInIsSet(true);
    this.maxId = maxId;
    setMaxIdIsSet(true);
    this.maxIdString = maxIdString;
    this.nextResults = nextResults;
    this.query = query;
    this.refreshUrl = refreshUrl;
    this.count = count;
    setCountIsSet(true);
    this.sinceId = sinceId;
    setSinceIdIsSet(true);
    this.sinceIdString = sinceIdString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchMetadata(SearchMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    this.completedIn = other.completedIn;
    this.maxId = other.maxId;
    if (other.isSetMaxIdString()) {
      this.maxIdString = other.maxIdString;
    }
    if (other.isSetNextResults()) {
      this.nextResults = other.nextResults;
    }
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetRefreshUrl()) {
      this.refreshUrl = other.refreshUrl;
    }
    this.count = other.count;
    this.sinceId = other.sinceId;
    if (other.isSetSinceIdString()) {
      this.sinceIdString = other.sinceIdString;
    }
  }

  public SearchMetadata deepCopy() {
    return new SearchMetadata(this);
  }

  @Override
  public void clear() {
    setCompletedInIsSet(false);
    this.completedIn = 0.0;
    setMaxIdIsSet(false);
    this.maxId = 0;
    this.maxIdString = null;
    this.nextResults = null;
    this.query = null;
    this.refreshUrl = null;
    setCountIsSet(false);
    this.count = 0;
    setSinceIdIsSet(false);
    this.sinceId = 0;
    this.sinceIdString = null;
  }

  public double getCompletedIn() {
    return this.completedIn;
  }

  public SearchMetadata setCompletedIn(double completedIn) {
    this.completedIn = completedIn;
    setCompletedInIsSet(true);
    return this;
  }

  public void unsetCompletedIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEDIN_ISSET_ID);
  }

  /** Returns true if field completedIn is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletedIn() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEDIN_ISSET_ID);
  }

  public void setCompletedInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEDIN_ISSET_ID, value);
  }

  public long getMaxId() {
    return this.maxId;
  }

  public SearchMetadata setMaxId(long maxId) {
    this.maxId = maxId;
    setMaxIdIsSet(true);
    return this;
  }

  public void unsetMaxId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXID_ISSET_ID);
  }

  /** Returns true if field maxId is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxId() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXID_ISSET_ID);
  }

  public void setMaxIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXID_ISSET_ID, value);
  }

  public String getMaxIdString() {
    return this.maxIdString;
  }

  public SearchMetadata setMaxIdString(String maxIdString) {
    this.maxIdString = maxIdString;
    return this;
  }

  public void unsetMaxIdString() {
    this.maxIdString = null;
  }

  /** Returns true if field maxIdString is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxIdString() {
    return this.maxIdString != null;
  }

  public void setMaxIdStringIsSet(boolean value) {
    if (!value) {
      this.maxIdString = null;
    }
  }

  public String getNextResults() {
    return this.nextResults;
  }

  public SearchMetadata setNextResults(String nextResults) {
    this.nextResults = nextResults;
    return this;
  }

  public void unsetNextResults() {
    this.nextResults = null;
  }

  /** Returns true if field nextResults is set (has been assigned a value) and false otherwise */
  public boolean isSetNextResults() {
    return this.nextResults != null;
  }

  public void setNextResultsIsSet(boolean value) {
    if (!value) {
      this.nextResults = null;
    }
  }

  public String getQuery() {
    return this.query;
  }

  public SearchMetadata setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getRefreshUrl() {
    return this.refreshUrl;
  }

  public SearchMetadata setRefreshUrl(String refreshUrl) {
    this.refreshUrl = refreshUrl;
    return this;
  }

  public void unsetRefreshUrl() {
    this.refreshUrl = null;
  }

  /** Returns true if field refreshUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshUrl() {
    return this.refreshUrl != null;
  }

  public void setRefreshUrlIsSet(boolean value) {
    if (!value) {
      this.refreshUrl = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public SearchMetadata setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public long getSinceId() {
    return this.sinceId;
  }

  public SearchMetadata setSinceId(long sinceId) {
    this.sinceId = sinceId;
    setSinceIdIsSet(true);
    return this;
  }

  public void unsetSinceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SINCEID_ISSET_ID);
  }

  /** Returns true if field sinceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSinceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SINCEID_ISSET_ID);
  }

  public void setSinceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SINCEID_ISSET_ID, value);
  }

  public String getSinceIdString() {
    return this.sinceIdString;
  }

  public SearchMetadata setSinceIdString(String sinceIdString) {
    this.sinceIdString = sinceIdString;
    return this;
  }

  public void unsetSinceIdString() {
    this.sinceIdString = null;
  }

  /** Returns true if field sinceIdString is set (has been assigned a value) and false otherwise */
  public boolean isSetSinceIdString() {
    return this.sinceIdString != null;
  }

  public void setSinceIdStringIsSet(boolean value) {
    if (!value) {
      this.sinceIdString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPLETED_IN:
      if (value == null) {
        unsetCompletedIn();
      } else {
        setCompletedIn((Double)value);
      }
      break;

    case MAX_ID:
      if (value == null) {
        unsetMaxId();
      } else {
        setMaxId((Long)value);
      }
      break;

    case MAX_ID_STRING:
      if (value == null) {
        unsetMaxIdString();
      } else {
        setMaxIdString((String)value);
      }
      break;

    case NEXT_RESULTS:
      if (value == null) {
        unsetNextResults();
      } else {
        setNextResults((String)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case REFRESH_URL:
      if (value == null) {
        unsetRefreshUrl();
      } else {
        setRefreshUrl((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case SINCE_ID:
      if (value == null) {
        unsetSinceId();
      } else {
        setSinceId((Long)value);
      }
      break;

    case SINCE_ID_STRING:
      if (value == null) {
        unsetSinceIdString();
      } else {
        setSinceIdString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPLETED_IN:
      return Double.valueOf(getCompletedIn());

    case MAX_ID:
      return Long.valueOf(getMaxId());

    case MAX_ID_STRING:
      return getMaxIdString();

    case NEXT_RESULTS:
      return getNextResults();

    case QUERY:
      return getQuery();

    case REFRESH_URL:
      return getRefreshUrl();

    case COUNT:
      return Integer.valueOf(getCount());

    case SINCE_ID:
      return Long.valueOf(getSinceId());

    case SINCE_ID_STRING:
      return getSinceIdString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPLETED_IN:
      return isSetCompletedIn();
    case MAX_ID:
      return isSetMaxId();
    case MAX_ID_STRING:
      return isSetMaxIdString();
    case NEXT_RESULTS:
      return isSetNextResults();
    case QUERY:
      return isSetQuery();
    case REFRESH_URL:
      return isSetRefreshUrl();
    case COUNT:
      return isSetCount();
    case SINCE_ID:
      return isSetSinceId();
    case SINCE_ID_STRING:
      return isSetSinceIdString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchMetadata)
      return this.equals((SearchMetadata)that);
    return false;
  }

  public boolean equals(SearchMetadata that) {
    if (that == null)
      return false;

    boolean this_present_completedIn = true;
    boolean that_present_completedIn = true;
    if (this_present_completedIn || that_present_completedIn) {
      if (!(this_present_completedIn && that_present_completedIn))
        return false;
      if (this.completedIn != that.completedIn)
        return false;
    }

    boolean this_present_maxId = true;
    boolean that_present_maxId = true;
    if (this_present_maxId || that_present_maxId) {
      if (!(this_present_maxId && that_present_maxId))
        return false;
      if (this.maxId != that.maxId)
        return false;
    }

    boolean this_present_maxIdString = true && this.isSetMaxIdString();
    boolean that_present_maxIdString = true && that.isSetMaxIdString();
    if (this_present_maxIdString || that_present_maxIdString) {
      if (!(this_present_maxIdString && that_present_maxIdString))
        return false;
      if (!this.maxIdString.equals(that.maxIdString))
        return false;
    }

    boolean this_present_nextResults = true && this.isSetNextResults();
    boolean that_present_nextResults = true && that.isSetNextResults();
    if (this_present_nextResults || that_present_nextResults) {
      if (!(this_present_nextResults && that_present_nextResults))
        return false;
      if (!this.nextResults.equals(that.nextResults))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_refreshUrl = true && this.isSetRefreshUrl();
    boolean that_present_refreshUrl = true && that.isSetRefreshUrl();
    if (this_present_refreshUrl || that_present_refreshUrl) {
      if (!(this_present_refreshUrl && that_present_refreshUrl))
        return false;
      if (!this.refreshUrl.equals(that.refreshUrl))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_sinceId = true;
    boolean that_present_sinceId = true;
    if (this_present_sinceId || that_present_sinceId) {
      if (!(this_present_sinceId && that_present_sinceId))
        return false;
      if (this.sinceId != that.sinceId)
        return false;
    }

    boolean this_present_sinceIdString = true && this.isSetSinceIdString();
    boolean that_present_sinceIdString = true && that.isSetSinceIdString();
    if (this_present_sinceIdString || that_present_sinceIdString) {
      if (!(this_present_sinceIdString && that_present_sinceIdString))
        return false;
      if (!this.sinceIdString.equals(that.sinceIdString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SearchMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompletedIn()).compareTo(other.isSetCompletedIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletedIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completedIn, other.completedIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxId()).compareTo(other.isSetMaxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxId, other.maxId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxIdString()).compareTo(other.isSetMaxIdString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxIdString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxIdString, other.maxIdString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextResults()).compareTo(other.isSetNextResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextResults, other.nextResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefreshUrl()).compareTo(other.isSetRefreshUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshUrl, other.refreshUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSinceId()).compareTo(other.isSetSinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sinceId, other.sinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSinceIdString()).compareTo(other.isSetSinceIdString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinceIdString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sinceIdString, other.sinceIdString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchMetadata(");
    boolean first = true;

    sb.append("completedIn:");
    sb.append(this.completedIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxId:");
    sb.append(this.maxId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxIdString:");
    if (this.maxIdString == null) {
      sb.append("null");
    } else {
      sb.append(this.maxIdString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextResults:");
    if (this.nextResults == null) {
      sb.append("null");
    } else {
      sb.append(this.nextResults);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refreshUrl:");
    if (this.refreshUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.refreshUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sinceId:");
    sb.append(this.sinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sinceIdString:");
    if (this.sinceIdString == null) {
      sb.append("null");
    } else {
      sb.append(this.sinceIdString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'completedIn' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxId' because it's a primitive and you chose the non-beans generator.
    if (maxIdString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxIdString' was not present! Struct: " + toString());
    }
    if (nextResults == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nextResults' was not present! Struct: " + toString());
    }
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    if (refreshUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refreshUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sinceId' because it's a primitive and you chose the non-beans generator.
    if (sinceIdString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sinceIdString' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchMetadataStandardSchemeFactory implements SchemeFactory {
    public SearchMetadataStandardScheme getScheme() {
      return new SearchMetadataStandardScheme();
    }
  }

  private static class SearchMetadataStandardScheme extends StandardScheme<SearchMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPLETED_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.completedIn = iprot.readDouble();
              struct.setCompletedInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxId = iprot.readI64();
              struct.setMaxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_ID_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxIdString = iprot.readString();
              struct.setMaxIdStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEXT_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nextResults = iprot.readString();
              struct.setNextResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFRESH_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refreshUrl = iprot.readString();
              struct.setRefreshUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SINCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sinceId = iprot.readI64();
              struct.setSinceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SINCE_ID_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sinceIdString = iprot.readString();
              struct.setSinceIdStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCompletedIn()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'completedIn' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSinceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sinceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMPLETED_IN_FIELD_DESC);
      oprot.writeDouble(struct.completedIn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ID_FIELD_DESC);
      oprot.writeI64(struct.maxId);
      oprot.writeFieldEnd();
      if (struct.maxIdString != null) {
        oprot.writeFieldBegin(MAX_ID_STRING_FIELD_DESC);
        oprot.writeString(struct.maxIdString);
        oprot.writeFieldEnd();
      }
      if (struct.nextResults != null) {
        oprot.writeFieldBegin(NEXT_RESULTS_FIELD_DESC);
        oprot.writeString(struct.nextResults);
        oprot.writeFieldEnd();
      }
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.refreshUrl != null) {
        oprot.writeFieldBegin(REFRESH_URL_FIELD_DESC);
        oprot.writeString(struct.refreshUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SINCE_ID_FIELD_DESC);
      oprot.writeI64(struct.sinceId);
      oprot.writeFieldEnd();
      if (struct.sinceIdString != null) {
        oprot.writeFieldBegin(SINCE_ID_STRING_FIELD_DESC);
        oprot.writeString(struct.sinceIdString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchMetadataTupleSchemeFactory implements SchemeFactory {
    public SearchMetadataTupleScheme getScheme() {
      return new SearchMetadataTupleScheme();
    }
  }

  private static class SearchMetadataTupleScheme extends TupleScheme<SearchMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeDouble(struct.completedIn);
      oprot.writeI64(struct.maxId);
      oprot.writeString(struct.maxIdString);
      oprot.writeString(struct.nextResults);
      oprot.writeString(struct.query);
      oprot.writeString(struct.refreshUrl);
      oprot.writeI32(struct.count);
      oprot.writeI64(struct.sinceId);
      oprot.writeString(struct.sinceIdString);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.completedIn = iprot.readDouble();
      struct.setCompletedInIsSet(true);
      struct.maxId = iprot.readI64();
      struct.setMaxIdIsSet(true);
      struct.maxIdString = iprot.readString();
      struct.setMaxIdStringIsSet(true);
      struct.nextResults = iprot.readString();
      struct.setNextResultsIsSet(true);
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      struct.refreshUrl = iprot.readString();
      struct.setRefreshUrlIsSet(true);
      struct.count = iprot.readI32();
      struct.setCountIsSet(true);
      struct.sinceId = iprot.readI64();
      struct.setSinceIdIsSet(true);
      struct.sinceIdString = iprot.readString();
      struct.setSinceIdStringIsSet(true);
    }
  }

}

