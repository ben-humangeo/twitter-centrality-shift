/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thehumangeo.twitter.centrality.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatusEntities implements org.apache.thrift.TBase<StatusEntities, StatusEntities._Fields>, java.io.Serializable, Cloneable, Comparable<StatusEntities> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusEntities");

  private static final org.apache.thrift.protocol.TField HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtags", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SYMBOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("symbols", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField USER_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("userMentions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField FAVORITED_FIELD_DESC = new org.apache.thrift.protocol.TField("favorited", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField RETWEETED_FIELD_DESC = new org.apache.thrift.protocol.TField("retweeted", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField POSSIBLY_SENSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("possiblySensitive", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusEntitiesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusEntitiesTupleSchemeFactory());
  }

  public List<String> hashtags; // required
  public List<String> symbols; // required
  public List<StatusEntitiesUserMentions> userMentions; // required
  public List<StatusEntitiesUrls> urls; // required
  public boolean favorited; // required
  public boolean retweeted; // required
  public boolean possiblySensitive; // required
  public String lang; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HASHTAGS((short)1, "hashtags"),
    SYMBOLS((short)2, "symbols"),
    USER_MENTIONS((short)3, "userMentions"),
    URLS((short)4, "urls"),
    FAVORITED((short)5, "favorited"),
    RETWEETED((short)6, "retweeted"),
    POSSIBLY_SENSITIVE((short)7, "possiblySensitive"),
    LANG((short)8, "lang");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HASHTAGS
          return HASHTAGS;
        case 2: // SYMBOLS
          return SYMBOLS;
        case 3: // USER_MENTIONS
          return USER_MENTIONS;
        case 4: // URLS
          return URLS;
        case 5: // FAVORITED
          return FAVORITED;
        case 6: // RETWEETED
          return RETWEETED;
        case 7: // POSSIBLY_SENSITIVE
          return POSSIBLY_SENSITIVE;
        case 8: // LANG
          return LANG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FAVORITED_ISSET_ID = 0;
  private static final int __RETWEETED_ISSET_ID = 1;
  private static final int __POSSIBLYSENSITIVE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("hashtags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SYMBOLS, new org.apache.thrift.meta_data.FieldMetaData("symbols", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("userMentions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusEntitiesUserMentions.class))));
    tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusEntitiesUrls.class))));
    tmpMap.put(_Fields.FAVORITED, new org.apache.thrift.meta_data.FieldMetaData("favorited", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RETWEETED, new org.apache.thrift.meta_data.FieldMetaData("retweeted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POSSIBLY_SENSITIVE, new org.apache.thrift.meta_data.FieldMetaData("possiblySensitive", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusEntities.class, metaDataMap);
  }

  public StatusEntities() {
  }

  public StatusEntities(
    List<String> hashtags,
    List<String> symbols,
    List<StatusEntitiesUserMentions> userMentions,
    List<StatusEntitiesUrls> urls,
    boolean favorited,
    boolean retweeted,
    boolean possiblySensitive,
    String lang)
  {
    this();
    this.hashtags = hashtags;
    this.symbols = symbols;
    this.userMentions = userMentions;
    this.urls = urls;
    this.favorited = favorited;
    setFavoritedIsSet(true);
    this.retweeted = retweeted;
    setRetweetedIsSet(true);
    this.possiblySensitive = possiblySensitive;
    setPossiblySensitiveIsSet(true);
    this.lang = lang;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusEntities(StatusEntities other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHashtags()) {
      List<String> __this__hashtags = new ArrayList<String>(other.hashtags);
      this.hashtags = __this__hashtags;
    }
    if (other.isSetSymbols()) {
      List<String> __this__symbols = new ArrayList<String>(other.symbols);
      this.symbols = __this__symbols;
    }
    if (other.isSetUserMentions()) {
      List<StatusEntitiesUserMentions> __this__userMentions = new ArrayList<StatusEntitiesUserMentions>(other.userMentions.size());
      for (StatusEntitiesUserMentions other_element : other.userMentions) {
        __this__userMentions.add(new StatusEntitiesUserMentions(other_element));
      }
      this.userMentions = __this__userMentions;
    }
    if (other.isSetUrls()) {
      List<StatusEntitiesUrls> __this__urls = new ArrayList<StatusEntitiesUrls>(other.urls.size());
      for (StatusEntitiesUrls other_element : other.urls) {
        __this__urls.add(new StatusEntitiesUrls(other_element));
      }
      this.urls = __this__urls;
    }
    this.favorited = other.favorited;
    this.retweeted = other.retweeted;
    this.possiblySensitive = other.possiblySensitive;
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
  }

  public StatusEntities deepCopy() {
    return new StatusEntities(this);
  }

  @Override
  public void clear() {
    this.hashtags = null;
    this.symbols = null;
    this.userMentions = null;
    this.urls = null;
    setFavoritedIsSet(false);
    this.favorited = false;
    setRetweetedIsSet(false);
    this.retweeted = false;
    setPossiblySensitiveIsSet(false);
    this.possiblySensitive = false;
    this.lang = null;
  }

  public int getHashtagsSize() {
    return (this.hashtags == null) ? 0 : this.hashtags.size();
  }

  public java.util.Iterator<String> getHashtagsIterator() {
    return (this.hashtags == null) ? null : this.hashtags.iterator();
  }

  public void addToHashtags(String elem) {
    if (this.hashtags == null) {
      this.hashtags = new ArrayList<String>();
    }
    this.hashtags.add(elem);
  }

  public List<String> getHashtags() {
    return this.hashtags;
  }

  public StatusEntities setHashtags(List<String> hashtags) {
    this.hashtags = hashtags;
    return this;
  }

  public void unsetHashtags() {
    this.hashtags = null;
  }

  /** Returns true if field hashtags is set (has been assigned a value) and false otherwise */
  public boolean isSetHashtags() {
    return this.hashtags != null;
  }

  public void setHashtagsIsSet(boolean value) {
    if (!value) {
      this.hashtags = null;
    }
  }

  public int getSymbolsSize() {
    return (this.symbols == null) ? 0 : this.symbols.size();
  }

  public java.util.Iterator<String> getSymbolsIterator() {
    return (this.symbols == null) ? null : this.symbols.iterator();
  }

  public void addToSymbols(String elem) {
    if (this.symbols == null) {
      this.symbols = new ArrayList<String>();
    }
    this.symbols.add(elem);
  }

  public List<String> getSymbols() {
    return this.symbols;
  }

  public StatusEntities setSymbols(List<String> symbols) {
    this.symbols = symbols;
    return this;
  }

  public void unsetSymbols() {
    this.symbols = null;
  }

  /** Returns true if field symbols is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbols() {
    return this.symbols != null;
  }

  public void setSymbolsIsSet(boolean value) {
    if (!value) {
      this.symbols = null;
    }
  }

  public int getUserMentionsSize() {
    return (this.userMentions == null) ? 0 : this.userMentions.size();
  }

  public java.util.Iterator<StatusEntitiesUserMentions> getUserMentionsIterator() {
    return (this.userMentions == null) ? null : this.userMentions.iterator();
  }

  public void addToUserMentions(StatusEntitiesUserMentions elem) {
    if (this.userMentions == null) {
      this.userMentions = new ArrayList<StatusEntitiesUserMentions>();
    }
    this.userMentions.add(elem);
  }

  public List<StatusEntitiesUserMentions> getUserMentions() {
    return this.userMentions;
  }

  public StatusEntities setUserMentions(List<StatusEntitiesUserMentions> userMentions) {
    this.userMentions = userMentions;
    return this;
  }

  public void unsetUserMentions() {
    this.userMentions = null;
  }

  /** Returns true if field userMentions is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMentions() {
    return this.userMentions != null;
  }

  public void setUserMentionsIsSet(boolean value) {
    if (!value) {
      this.userMentions = null;
    }
  }

  public int getUrlsSize() {
    return (this.urls == null) ? 0 : this.urls.size();
  }

  public java.util.Iterator<StatusEntitiesUrls> getUrlsIterator() {
    return (this.urls == null) ? null : this.urls.iterator();
  }

  public void addToUrls(StatusEntitiesUrls elem) {
    if (this.urls == null) {
      this.urls = new ArrayList<StatusEntitiesUrls>();
    }
    this.urls.add(elem);
  }

  public List<StatusEntitiesUrls> getUrls() {
    return this.urls;
  }

  public StatusEntities setUrls(List<StatusEntitiesUrls> urls) {
    this.urls = urls;
    return this;
  }

  public void unsetUrls() {
    this.urls = null;
  }

  /** Returns true if field urls is set (has been assigned a value) and false otherwise */
  public boolean isSetUrls() {
    return this.urls != null;
  }

  public void setUrlsIsSet(boolean value) {
    if (!value) {
      this.urls = null;
    }
  }

  public boolean isFavorited() {
    return this.favorited;
  }

  public StatusEntities setFavorited(boolean favorited) {
    this.favorited = favorited;
    setFavoritedIsSet(true);
    return this;
  }

  public void unsetFavorited() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVORITED_ISSET_ID);
  }

  /** Returns true if field favorited is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorited() {
    return EncodingUtils.testBit(__isset_bitfield, __FAVORITED_ISSET_ID);
  }

  public void setFavoritedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVORITED_ISSET_ID, value);
  }

  public boolean isRetweeted() {
    return this.retweeted;
  }

  public StatusEntities setRetweeted(boolean retweeted) {
    this.retweeted = retweeted;
    setRetweetedIsSet(true);
    return this;
  }

  public void unsetRetweeted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETWEETED_ISSET_ID);
  }

  /** Returns true if field retweeted is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweeted() {
    return EncodingUtils.testBit(__isset_bitfield, __RETWEETED_ISSET_ID);
  }

  public void setRetweetedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETWEETED_ISSET_ID, value);
  }

  public boolean isPossiblySensitive() {
    return this.possiblySensitive;
  }

  public StatusEntities setPossiblySensitive(boolean possiblySensitive) {
    this.possiblySensitive = possiblySensitive;
    setPossiblySensitiveIsSet(true);
    return this;
  }

  public void unsetPossiblySensitive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSSIBLYSENSITIVE_ISSET_ID);
  }

  /** Returns true if field possiblySensitive is set (has been assigned a value) and false otherwise */
  public boolean isSetPossiblySensitive() {
    return EncodingUtils.testBit(__isset_bitfield, __POSSIBLYSENSITIVE_ISSET_ID);
  }

  public void setPossiblySensitiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSSIBLYSENSITIVE_ISSET_ID, value);
  }

  public String getLang() {
    return this.lang;
  }

  public StatusEntities setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HASHTAGS:
      if (value == null) {
        unsetHashtags();
      } else {
        setHashtags((List<String>)value);
      }
      break;

    case SYMBOLS:
      if (value == null) {
        unsetSymbols();
      } else {
        setSymbols((List<String>)value);
      }
      break;

    case USER_MENTIONS:
      if (value == null) {
        unsetUserMentions();
      } else {
        setUserMentions((List<StatusEntitiesUserMentions>)value);
      }
      break;

    case URLS:
      if (value == null) {
        unsetUrls();
      } else {
        setUrls((List<StatusEntitiesUrls>)value);
      }
      break;

    case FAVORITED:
      if (value == null) {
        unsetFavorited();
      } else {
        setFavorited((Boolean)value);
      }
      break;

    case RETWEETED:
      if (value == null) {
        unsetRetweeted();
      } else {
        setRetweeted((Boolean)value);
      }
      break;

    case POSSIBLY_SENSITIVE:
      if (value == null) {
        unsetPossiblySensitive();
      } else {
        setPossiblySensitive((Boolean)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HASHTAGS:
      return getHashtags();

    case SYMBOLS:
      return getSymbols();

    case USER_MENTIONS:
      return getUserMentions();

    case URLS:
      return getUrls();

    case FAVORITED:
      return Boolean.valueOf(isFavorited());

    case RETWEETED:
      return Boolean.valueOf(isRetweeted());

    case POSSIBLY_SENSITIVE:
      return Boolean.valueOf(isPossiblySensitive());

    case LANG:
      return getLang();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HASHTAGS:
      return isSetHashtags();
    case SYMBOLS:
      return isSetSymbols();
    case USER_MENTIONS:
      return isSetUserMentions();
    case URLS:
      return isSetUrls();
    case FAVORITED:
      return isSetFavorited();
    case RETWEETED:
      return isSetRetweeted();
    case POSSIBLY_SENSITIVE:
      return isSetPossiblySensitive();
    case LANG:
      return isSetLang();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatusEntities)
      return this.equals((StatusEntities)that);
    return false;
  }

  public boolean equals(StatusEntities that) {
    if (that == null)
      return false;

    boolean this_present_hashtags = true && this.isSetHashtags();
    boolean that_present_hashtags = true && that.isSetHashtags();
    if (this_present_hashtags || that_present_hashtags) {
      if (!(this_present_hashtags && that_present_hashtags))
        return false;
      if (!this.hashtags.equals(that.hashtags))
        return false;
    }

    boolean this_present_symbols = true && this.isSetSymbols();
    boolean that_present_symbols = true && that.isSetSymbols();
    if (this_present_symbols || that_present_symbols) {
      if (!(this_present_symbols && that_present_symbols))
        return false;
      if (!this.symbols.equals(that.symbols))
        return false;
    }

    boolean this_present_userMentions = true && this.isSetUserMentions();
    boolean that_present_userMentions = true && that.isSetUserMentions();
    if (this_present_userMentions || that_present_userMentions) {
      if (!(this_present_userMentions && that_present_userMentions))
        return false;
      if (!this.userMentions.equals(that.userMentions))
        return false;
    }

    boolean this_present_urls = true && this.isSetUrls();
    boolean that_present_urls = true && that.isSetUrls();
    if (this_present_urls || that_present_urls) {
      if (!(this_present_urls && that_present_urls))
        return false;
      if (!this.urls.equals(that.urls))
        return false;
    }

    boolean this_present_favorited = true;
    boolean that_present_favorited = true;
    if (this_present_favorited || that_present_favorited) {
      if (!(this_present_favorited && that_present_favorited))
        return false;
      if (this.favorited != that.favorited)
        return false;
    }

    boolean this_present_retweeted = true;
    boolean that_present_retweeted = true;
    if (this_present_retweeted || that_present_retweeted) {
      if (!(this_present_retweeted && that_present_retweeted))
        return false;
      if (this.retweeted != that.retweeted)
        return false;
    }

    boolean this_present_possiblySensitive = true;
    boolean that_present_possiblySensitive = true;
    if (this_present_possiblySensitive || that_present_possiblySensitive) {
      if (!(this_present_possiblySensitive && that_present_possiblySensitive))
        return false;
      if (this.possiblySensitive != that.possiblySensitive)
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatusEntities other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHashtags()).compareTo(other.isSetHashtags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashtags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtags, other.hashtags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSymbols()).compareTo(other.isSetSymbols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbols, other.symbols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserMentions()).compareTo(other.isSetUserMentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMentions, other.userMentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrls()).compareTo(other.isSetUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, other.urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavorited()).compareTo(other.isSetFavorited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorited, other.favorited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetweeted()).compareTo(other.isSetRetweeted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweeted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweeted, other.retweeted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPossiblySensitive()).compareTo(other.isSetPossiblySensitive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPossiblySensitive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.possiblySensitive, other.possiblySensitive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatusEntities(");
    boolean first = true;

    sb.append("hashtags:");
    if (this.hashtags == null) {
      sb.append("null");
    } else {
      sb.append(this.hashtags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("symbols:");
    if (this.symbols == null) {
      sb.append("null");
    } else {
      sb.append(this.symbols);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userMentions:");
    if (this.userMentions == null) {
      sb.append("null");
    } else {
      sb.append(this.userMentions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("urls:");
    if (this.urls == null) {
      sb.append("null");
    } else {
      sb.append(this.urls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favorited:");
    sb.append(this.favorited);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retweeted:");
    sb.append(this.retweeted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("possiblySensitive:");
    sb.append(this.possiblySensitive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lang:");
    if (this.lang == null) {
      sb.append("null");
    } else {
      sb.append(this.lang);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hashtags == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hashtags' was not present! Struct: " + toString());
    }
    if (symbols == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'symbols' was not present! Struct: " + toString());
    }
    if (userMentions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userMentions' was not present! Struct: " + toString());
    }
    if (urls == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'urls' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'favorited' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'retweeted' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'possiblySensitive' because it's a primitive and you chose the non-beans generator.
    if (lang == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lang' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusEntitiesStandardSchemeFactory implements SchemeFactory {
    public StatusEntitiesStandardScheme getScheme() {
      return new StatusEntitiesStandardScheme();
    }
  }

  private static class StatusEntitiesStandardScheme extends StandardScheme<StatusEntities> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HASHTAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.hashtags = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.hashtags.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setHashtagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYMBOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.symbols = new ArrayList<String>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  String _elem29;
                  _elem29 = iprot.readString();
                  struct.symbols.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setSymbolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_MENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.userMentions = new ArrayList<StatusEntitiesUserMentions>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  StatusEntitiesUserMentions _elem32;
                  _elem32 = new StatusEntitiesUserMentions();
                  _elem32.read(iprot);
                  struct.userMentions.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setUserMentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.urls = new ArrayList<StatusEntitiesUrls>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  StatusEntitiesUrls _elem35;
                  _elem35 = new StatusEntitiesUrls();
                  _elem35.read(iprot);
                  struct.urls.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FAVORITED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.favorited = iprot.readBool();
              struct.setFavoritedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RETWEETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.retweeted = iprot.readBool();
              struct.setRetweetedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSSIBLY_SENSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.possiblySensitive = iprot.readBool();
              struct.setPossiblySensitiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFavorited()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'favorited' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRetweeted()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'retweeted' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPossiblySensitive()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'possiblySensitive' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusEntities struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hashtags != null) {
        oprot.writeFieldBegin(HASHTAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hashtags.size()));
          for (String _iter36 : struct.hashtags)
          {
            oprot.writeString(_iter36);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.symbols != null) {
        oprot.writeFieldBegin(SYMBOLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.symbols.size()));
          for (String _iter37 : struct.symbols)
          {
            oprot.writeString(_iter37);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userMentions != null) {
        oprot.writeFieldBegin(USER_MENTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userMentions.size()));
          for (StatusEntitiesUserMentions _iter38 : struct.userMentions)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.urls != null) {
        oprot.writeFieldBegin(URLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.urls.size()));
          for (StatusEntitiesUrls _iter39 : struct.urls)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FAVORITED_FIELD_DESC);
      oprot.writeBool(struct.favorited);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETWEETED_FIELD_DESC);
      oprot.writeBool(struct.retweeted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSSIBLY_SENSITIVE_FIELD_DESC);
      oprot.writeBool(struct.possiblySensitive);
      oprot.writeFieldEnd();
      if (struct.lang != null) {
        oprot.writeFieldBegin(LANG_FIELD_DESC);
        oprot.writeString(struct.lang);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusEntitiesTupleSchemeFactory implements SchemeFactory {
    public StatusEntitiesTupleScheme getScheme() {
      return new StatusEntitiesTupleScheme();
    }
  }

  private static class StatusEntitiesTupleScheme extends TupleScheme<StatusEntities> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusEntities struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.hashtags.size());
        for (String _iter40 : struct.hashtags)
        {
          oprot.writeString(_iter40);
        }
      }
      {
        oprot.writeI32(struct.symbols.size());
        for (String _iter41 : struct.symbols)
        {
          oprot.writeString(_iter41);
        }
      }
      {
        oprot.writeI32(struct.userMentions.size());
        for (StatusEntitiesUserMentions _iter42 : struct.userMentions)
        {
          _iter42.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.urls.size());
        for (StatusEntitiesUrls _iter43 : struct.urls)
        {
          _iter43.write(oprot);
        }
      }
      oprot.writeBool(struct.favorited);
      oprot.writeBool(struct.retweeted);
      oprot.writeBool(struct.possiblySensitive);
      oprot.writeString(struct.lang);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusEntities struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.hashtags = new ArrayList<String>(_list44.size);
        for (int _i45 = 0; _i45 < _list44.size; ++_i45)
        {
          String _elem46;
          _elem46 = iprot.readString();
          struct.hashtags.add(_elem46);
        }
      }
      struct.setHashtagsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.symbols = new ArrayList<String>(_list47.size);
        for (int _i48 = 0; _i48 < _list47.size; ++_i48)
        {
          String _elem49;
          _elem49 = iprot.readString();
          struct.symbols.add(_elem49);
        }
      }
      struct.setSymbolsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.userMentions = new ArrayList<StatusEntitiesUserMentions>(_list50.size);
        for (int _i51 = 0; _i51 < _list50.size; ++_i51)
        {
          StatusEntitiesUserMentions _elem52;
          _elem52 = new StatusEntitiesUserMentions();
          _elem52.read(iprot);
          struct.userMentions.add(_elem52);
        }
      }
      struct.setUserMentionsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.urls = new ArrayList<StatusEntitiesUrls>(_list53.size);
        for (int _i54 = 0; _i54 < _list53.size; ++_i54)
        {
          StatusEntitiesUrls _elem55;
          _elem55 = new StatusEntitiesUrls();
          _elem55.read(iprot);
          struct.urls.add(_elem55);
        }
      }
      struct.setUrlsIsSet(true);
      struct.favorited = iprot.readBool();
      struct.setFavoritedIsSet(true);
      struct.retweeted = iprot.readBool();
      struct.setRetweetedIsSet(true);
      struct.possiblySensitive = iprot.readBool();
      struct.setPossiblySensitiveIsSet(true);
      struct.lang = iprot.readString();
      struct.setLangIsSet(true);
    }
  }

}

