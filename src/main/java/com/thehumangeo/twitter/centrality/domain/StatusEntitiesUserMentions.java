/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thehumangeo.twitter.centrality.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatusEntitiesUserMentions implements org.apache.thrift.TBase<StatusEntitiesUserMentions, StatusEntitiesUserMentions._Fields>, java.io.Serializable, Cloneable, Comparable<StatusEntitiesUserMentions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusEntitiesUserMentions");

  private static final org.apache.thrift.protocol.TField SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("screenName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("idString", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("indices", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusEntitiesUserMentionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusEntitiesUserMentionsTupleSchemeFactory());
  }

  public String screenName; // required
  public String name; // required
  public int id; // required
  public String idString; // required
  public List<Integer> indices; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCREEN_NAME((short)1, "screenName"),
    NAME((short)2, "name"),
    ID((short)3, "id"),
    ID_STRING((short)4, "idString"),
    INDICES((short)5, "indices");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCREEN_NAME
          return SCREEN_NAME;
        case 2: // NAME
          return NAME;
        case 3: // ID
          return ID;
        case 4: // ID_STRING
          return ID_STRING;
        case 5: // INDICES
          return INDICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("screenName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_STRING, new org.apache.thrift.meta_data.FieldMetaData("idString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDICES, new org.apache.thrift.meta_data.FieldMetaData("indices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusEntitiesUserMentions.class, metaDataMap);
  }

  public StatusEntitiesUserMentions() {
  }

  public StatusEntitiesUserMentions(
    String screenName,
    String name,
    int id,
    String idString,
    List<Integer> indices)
  {
    this();
    this.screenName = screenName;
    this.name = name;
    this.id = id;
    setIdIsSet(true);
    this.idString = idString;
    this.indices = indices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusEntitiesUserMentions(StatusEntitiesUserMentions other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetScreenName()) {
      this.screenName = other.screenName;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.id = other.id;
    if (other.isSetIdString()) {
      this.idString = other.idString;
    }
    if (other.isSetIndices()) {
      List<Integer> __this__indices = new ArrayList<Integer>(other.indices);
      this.indices = __this__indices;
    }
  }

  public StatusEntitiesUserMentions deepCopy() {
    return new StatusEntitiesUserMentions(this);
  }

  @Override
  public void clear() {
    this.screenName = null;
    this.name = null;
    setIdIsSet(false);
    this.id = 0;
    this.idString = null;
    this.indices = null;
  }

  public String getScreenName() {
    return this.screenName;
  }

  public StatusEntitiesUserMentions setScreenName(String screenName) {
    this.screenName = screenName;
    return this;
  }

  public void unsetScreenName() {
    this.screenName = null;
  }

  /** Returns true if field screenName is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenName() {
    return this.screenName != null;
  }

  public void setScreenNameIsSet(boolean value) {
    if (!value) {
      this.screenName = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public StatusEntitiesUserMentions setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public StatusEntitiesUserMentions setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getIdString() {
    return this.idString;
  }

  public StatusEntitiesUserMentions setIdString(String idString) {
    this.idString = idString;
    return this;
  }

  public void unsetIdString() {
    this.idString = null;
  }

  /** Returns true if field idString is set (has been assigned a value) and false otherwise */
  public boolean isSetIdString() {
    return this.idString != null;
  }

  public void setIdStringIsSet(boolean value) {
    if (!value) {
      this.idString = null;
    }
  }

  public int getIndicesSize() {
    return (this.indices == null) ? 0 : this.indices.size();
  }

  public java.util.Iterator<Integer> getIndicesIterator() {
    return (this.indices == null) ? null : this.indices.iterator();
  }

  public void addToIndices(int elem) {
    if (this.indices == null) {
      this.indices = new ArrayList<Integer>();
    }
    this.indices.add(elem);
  }

  public List<Integer> getIndices() {
    return this.indices;
  }

  public StatusEntitiesUserMentions setIndices(List<Integer> indices) {
    this.indices = indices;
    return this;
  }

  public void unsetIndices() {
    this.indices = null;
  }

  /** Returns true if field indices is set (has been assigned a value) and false otherwise */
  public boolean isSetIndices() {
    return this.indices != null;
  }

  public void setIndicesIsSet(boolean value) {
    if (!value) {
      this.indices = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCREEN_NAME:
      if (value == null) {
        unsetScreenName();
      } else {
        setScreenName((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ID_STRING:
      if (value == null) {
        unsetIdString();
      } else {
        setIdString((String)value);
      }
      break;

    case INDICES:
      if (value == null) {
        unsetIndices();
      } else {
        setIndices((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCREEN_NAME:
      return getScreenName();

    case NAME:
      return getName();

    case ID:
      return Integer.valueOf(getId());

    case ID_STRING:
      return getIdString();

    case INDICES:
      return getIndices();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCREEN_NAME:
      return isSetScreenName();
    case NAME:
      return isSetName();
    case ID:
      return isSetId();
    case ID_STRING:
      return isSetIdString();
    case INDICES:
      return isSetIndices();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatusEntitiesUserMentions)
      return this.equals((StatusEntitiesUserMentions)that);
    return false;
  }

  public boolean equals(StatusEntitiesUserMentions that) {
    if (that == null)
      return false;

    boolean this_present_screenName = true && this.isSetScreenName();
    boolean that_present_screenName = true && that.isSetScreenName();
    if (this_present_screenName || that_present_screenName) {
      if (!(this_present_screenName && that_present_screenName))
        return false;
      if (!this.screenName.equals(that.screenName))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_idString = true && this.isSetIdString();
    boolean that_present_idString = true && that.isSetIdString();
    if (this_present_idString || that_present_idString) {
      if (!(this_present_idString && that_present_idString))
        return false;
      if (!this.idString.equals(that.idString))
        return false;
    }

    boolean this_present_indices = true && this.isSetIndices();
    boolean that_present_indices = true && that.isSetIndices();
    if (this_present_indices || that_present_indices) {
      if (!(this_present_indices && that_present_indices))
        return false;
      if (!this.indices.equals(that.indices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatusEntitiesUserMentions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScreenName()).compareTo(other.isSetScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenName, other.screenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdString()).compareTo(other.isSetIdString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idString, other.idString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndices()).compareTo(other.isSetIndices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indices, other.indices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatusEntitiesUserMentions(");
    boolean first = true;

    sb.append("screenName:");
    if (this.screenName == null) {
      sb.append("null");
    } else {
      sb.append(this.screenName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idString:");
    if (this.idString == null) {
      sb.append("null");
    } else {
      sb.append(this.idString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("indices:");
    if (this.indices == null) {
      sb.append("null");
    } else {
      sb.append(this.indices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (screenName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'screenName' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (idString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'idString' was not present! Struct: " + toString());
    }
    if (indices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'indices' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusEntitiesUserMentionsStandardSchemeFactory implements SchemeFactory {
    public StatusEntitiesUserMentionsStandardScheme getScheme() {
      return new StatusEntitiesUserMentionsStandardScheme();
    }
  }

  private static class StatusEntitiesUserMentionsStandardScheme extends StandardScheme<StatusEntitiesUserMentions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusEntitiesUserMentions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCREEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.screenName = iprot.readString();
              struct.setScreenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idString = iprot.readString();
              struct.setIdStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.indices = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10;
                  _elem10 = iprot.readI32();
                  struct.indices.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setIndicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusEntitiesUserMentions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.screenName != null) {
        oprot.writeFieldBegin(SCREEN_NAME_FIELD_DESC);
        oprot.writeString(struct.screenName);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.idString != null) {
        oprot.writeFieldBegin(ID_STRING_FIELD_DESC);
        oprot.writeString(struct.idString);
        oprot.writeFieldEnd();
      }
      if (struct.indices != null) {
        oprot.writeFieldBegin(INDICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.indices.size()));
          for (int _iter11 : struct.indices)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusEntitiesUserMentionsTupleSchemeFactory implements SchemeFactory {
    public StatusEntitiesUserMentionsTupleScheme getScheme() {
      return new StatusEntitiesUserMentionsTupleScheme();
    }
  }

  private static class StatusEntitiesUserMentionsTupleScheme extends TupleScheme<StatusEntitiesUserMentions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusEntitiesUserMentions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.screenName);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.id);
      oprot.writeString(struct.idString);
      {
        oprot.writeI32(struct.indices.size());
        for (int _iter12 : struct.indices)
        {
          oprot.writeI32(_iter12);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusEntitiesUserMentions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.screenName = iprot.readString();
      struct.setScreenNameIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.idString = iprot.readString();
      struct.setIdStringIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.indices = new ArrayList<Integer>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          int _elem15;
          _elem15 = iprot.readI32();
          struct.indices.add(_elem15);
        }
      }
      struct.setIndicesIsSet(true);
    }
  }

}

