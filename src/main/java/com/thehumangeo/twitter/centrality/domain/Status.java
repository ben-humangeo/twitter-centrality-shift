/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thehumangeo.twitter.centrality.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Status implements org.apache.thrift.TBase<Status, Status._Fields>, java.io.Serializable, Cloneable, Comparable<Status> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Status");

  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("idString", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRUNCATED_FIELD_DESC = new org.apache.thrift.protocol.TField("truncated", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_STATUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToStatusId", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_STATUS_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToStatusIdStr", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToUserId", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_USER_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToUserIdStr", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToScreenName", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusTupleSchemeFactory());
  }

  public StatusMetadata metadata; // required
  public String createdAt; // required
  public long id; // required
  public String idString; // required
  public String text; // required
  public String source; // required
  public boolean truncated; // required
  public boolean inReplyToStatusId; // required
  public boolean inReplyToStatusIdStr; // required
  public boolean inReplyToUserId; // required
  public boolean inReplyToUserIdStr; // required
  public boolean inReplyToScreenName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    METADATA((short)1, "metadata"),
    CREATED_AT((short)2, "createdAt"),
    ID((short)3, "id"),
    ID_STRING((short)4, "idString"),
    TEXT((short)5, "text"),
    SOURCE((short)6, "source"),
    TRUNCATED((short)7, "truncated"),
    IN_REPLY_TO_STATUS_ID((short)8, "inReplyToStatusId"),
    IN_REPLY_TO_STATUS_ID_STR((short)9, "inReplyToStatusIdStr"),
    IN_REPLY_TO_USER_ID((short)10, "inReplyToUserId"),
    IN_REPLY_TO_USER_ID_STR((short)11, "inReplyToUserIdStr"),
    IN_REPLY_TO_SCREEN_NAME((short)12, "inReplyToScreenName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METADATA
          return METADATA;
        case 2: // CREATED_AT
          return CREATED_AT;
        case 3: // ID
          return ID;
        case 4: // ID_STRING
          return ID_STRING;
        case 5: // TEXT
          return TEXT;
        case 6: // SOURCE
          return SOURCE;
        case 7: // TRUNCATED
          return TRUNCATED;
        case 8: // IN_REPLY_TO_STATUS_ID
          return IN_REPLY_TO_STATUS_ID;
        case 9: // IN_REPLY_TO_STATUS_ID_STR
          return IN_REPLY_TO_STATUS_ID_STR;
        case 10: // IN_REPLY_TO_USER_ID
          return IN_REPLY_TO_USER_ID;
        case 11: // IN_REPLY_TO_USER_ID_STR
          return IN_REPLY_TO_USER_ID_STR;
        case 12: // IN_REPLY_TO_SCREEN_NAME
          return IN_REPLY_TO_SCREEN_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TRUNCATED_ISSET_ID = 1;
  private static final int __INREPLYTOSTATUSID_ISSET_ID = 2;
  private static final int __INREPLYTOSTATUSIDSTR_ISSET_ID = 3;
  private static final int __INREPLYTOUSERID_ISSET_ID = 4;
  private static final int __INREPLYTOUSERIDSTR_ISSET_ID = 5;
  private static final int __INREPLYTOSCREENNAME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusMetadata.class)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID_STRING, new org.apache.thrift.meta_data.FieldMetaData("idString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRUNCATED, new org.apache.thrift.meta_data.FieldMetaData("truncated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_REPLY_TO_STATUS_ID, new org.apache.thrift.meta_data.FieldMetaData("inReplyToStatusId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_REPLY_TO_STATUS_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("inReplyToStatusIdStr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_REPLY_TO_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("inReplyToUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_REPLY_TO_USER_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("inReplyToUserIdStr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IN_REPLY_TO_SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("inReplyToScreenName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Status.class, metaDataMap);
  }

  public Status() {
  }

  public Status(
    StatusMetadata metadata,
    String createdAt,
    long id,
    String idString,
    String text,
    String source,
    boolean truncated,
    boolean inReplyToStatusId,
    boolean inReplyToStatusIdStr,
    boolean inReplyToUserId,
    boolean inReplyToUserIdStr,
    boolean inReplyToScreenName)
  {
    this();
    this.metadata = metadata;
    this.createdAt = createdAt;
    this.id = id;
    setIdIsSet(true);
    this.idString = idString;
    this.text = text;
    this.source = source;
    this.truncated = truncated;
    setTruncatedIsSet(true);
    this.inReplyToStatusId = inReplyToStatusId;
    setInReplyToStatusIdIsSet(true);
    this.inReplyToStatusIdStr = inReplyToStatusIdStr;
    setInReplyToStatusIdStrIsSet(true);
    this.inReplyToUserId = inReplyToUserId;
    setInReplyToUserIdIsSet(true);
    this.inReplyToUserIdStr = inReplyToUserIdStr;
    setInReplyToUserIdStrIsSet(true);
    this.inReplyToScreenName = inReplyToScreenName;
    setInReplyToScreenNameIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Status(Status other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMetadata()) {
      this.metadata = new StatusMetadata(other.metadata);
    }
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    this.id = other.id;
    if (other.isSetIdString()) {
      this.idString = other.idString;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.truncated = other.truncated;
    this.inReplyToStatusId = other.inReplyToStatusId;
    this.inReplyToStatusIdStr = other.inReplyToStatusIdStr;
    this.inReplyToUserId = other.inReplyToUserId;
    this.inReplyToUserIdStr = other.inReplyToUserIdStr;
    this.inReplyToScreenName = other.inReplyToScreenName;
  }

  public Status deepCopy() {
    return new Status(this);
  }

  @Override
  public void clear() {
    this.metadata = null;
    this.createdAt = null;
    setIdIsSet(false);
    this.id = 0;
    this.idString = null;
    this.text = null;
    this.source = null;
    setTruncatedIsSet(false);
    this.truncated = false;
    setInReplyToStatusIdIsSet(false);
    this.inReplyToStatusId = false;
    setInReplyToStatusIdStrIsSet(false);
    this.inReplyToStatusIdStr = false;
    setInReplyToUserIdIsSet(false);
    this.inReplyToUserId = false;
    setInReplyToUserIdStrIsSet(false);
    this.inReplyToUserIdStr = false;
    setInReplyToScreenNameIsSet(false);
    this.inReplyToScreenName = false;
  }

  public StatusMetadata getMetadata() {
    return this.metadata;
  }

  public Status setMetadata(StatusMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public Status setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public Status setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getIdString() {
    return this.idString;
  }

  public Status setIdString(String idString) {
    this.idString = idString;
    return this;
  }

  public void unsetIdString() {
    this.idString = null;
  }

  /** Returns true if field idString is set (has been assigned a value) and false otherwise */
  public boolean isSetIdString() {
    return this.idString != null;
  }

  public void setIdStringIsSet(boolean value) {
    if (!value) {
      this.idString = null;
    }
  }

  public String getText() {
    return this.text;
  }

  public Status setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public Status setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public boolean isTruncated() {
    return this.truncated;
  }

  public Status setTruncated(boolean truncated) {
    this.truncated = truncated;
    setTruncatedIsSet(true);
    return this;
  }

  public void unsetTruncated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRUNCATED_ISSET_ID);
  }

  /** Returns true if field truncated is set (has been assigned a value) and false otherwise */
  public boolean isSetTruncated() {
    return EncodingUtils.testBit(__isset_bitfield, __TRUNCATED_ISSET_ID);
  }

  public void setTruncatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRUNCATED_ISSET_ID, value);
  }

  public boolean isInReplyToStatusId() {
    return this.inReplyToStatusId;
  }

  public Status setInReplyToStatusId(boolean inReplyToStatusId) {
    this.inReplyToStatusId = inReplyToStatusId;
    setInReplyToStatusIdIsSet(true);
    return this;
  }

  public void unsetInReplyToStatusId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOSTATUSID_ISSET_ID);
  }

  /** Returns true if field inReplyToStatusId is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToStatusId() {
    return EncodingUtils.testBit(__isset_bitfield, __INREPLYTOSTATUSID_ISSET_ID);
  }

  public void setInReplyToStatusIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INREPLYTOSTATUSID_ISSET_ID, value);
  }

  public boolean isInReplyToStatusIdStr() {
    return this.inReplyToStatusIdStr;
  }

  public Status setInReplyToStatusIdStr(boolean inReplyToStatusIdStr) {
    this.inReplyToStatusIdStr = inReplyToStatusIdStr;
    setInReplyToStatusIdStrIsSet(true);
    return this;
  }

  public void unsetInReplyToStatusIdStr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOSTATUSIDSTR_ISSET_ID);
  }

  /** Returns true if field inReplyToStatusIdStr is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToStatusIdStr() {
    return EncodingUtils.testBit(__isset_bitfield, __INREPLYTOSTATUSIDSTR_ISSET_ID);
  }

  public void setInReplyToStatusIdStrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INREPLYTOSTATUSIDSTR_ISSET_ID, value);
  }

  public boolean isInReplyToUserId() {
    return this.inReplyToUserId;
  }

  public Status setInReplyToUserId(boolean inReplyToUserId) {
    this.inReplyToUserId = inReplyToUserId;
    setInReplyToUserIdIsSet(true);
    return this;
  }

  public void unsetInReplyToUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOUSERID_ISSET_ID);
  }

  /** Returns true if field inReplyToUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __INREPLYTOUSERID_ISSET_ID);
  }

  public void setInReplyToUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INREPLYTOUSERID_ISSET_ID, value);
  }

  public boolean isInReplyToUserIdStr() {
    return this.inReplyToUserIdStr;
  }

  public Status setInReplyToUserIdStr(boolean inReplyToUserIdStr) {
    this.inReplyToUserIdStr = inReplyToUserIdStr;
    setInReplyToUserIdStrIsSet(true);
    return this;
  }

  public void unsetInReplyToUserIdStr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOUSERIDSTR_ISSET_ID);
  }

  /** Returns true if field inReplyToUserIdStr is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToUserIdStr() {
    return EncodingUtils.testBit(__isset_bitfield, __INREPLYTOUSERIDSTR_ISSET_ID);
  }

  public void setInReplyToUserIdStrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INREPLYTOUSERIDSTR_ISSET_ID, value);
  }

  public boolean isInReplyToScreenName() {
    return this.inReplyToScreenName;
  }

  public Status setInReplyToScreenName(boolean inReplyToScreenName) {
    this.inReplyToScreenName = inReplyToScreenName;
    setInReplyToScreenNameIsSet(true);
    return this;
  }

  public void unsetInReplyToScreenName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOSCREENNAME_ISSET_ID);
  }

  /** Returns true if field inReplyToScreenName is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToScreenName() {
    return EncodingUtils.testBit(__isset_bitfield, __INREPLYTOSCREENNAME_ISSET_ID);
  }

  public void setInReplyToScreenNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INREPLYTOSCREENNAME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((StatusMetadata)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ID_STRING:
      if (value == null) {
        unsetIdString();
      } else {
        setIdString((String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case TRUNCATED:
      if (value == null) {
        unsetTruncated();
      } else {
        setTruncated((Boolean)value);
      }
      break;

    case IN_REPLY_TO_STATUS_ID:
      if (value == null) {
        unsetInReplyToStatusId();
      } else {
        setInReplyToStatusId((Boolean)value);
      }
      break;

    case IN_REPLY_TO_STATUS_ID_STR:
      if (value == null) {
        unsetInReplyToStatusIdStr();
      } else {
        setInReplyToStatusIdStr((Boolean)value);
      }
      break;

    case IN_REPLY_TO_USER_ID:
      if (value == null) {
        unsetInReplyToUserId();
      } else {
        setInReplyToUserId((Boolean)value);
      }
      break;

    case IN_REPLY_TO_USER_ID_STR:
      if (value == null) {
        unsetInReplyToUserIdStr();
      } else {
        setInReplyToUserIdStr((Boolean)value);
      }
      break;

    case IN_REPLY_TO_SCREEN_NAME:
      if (value == null) {
        unsetInReplyToScreenName();
      } else {
        setInReplyToScreenName((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METADATA:
      return getMetadata();

    case CREATED_AT:
      return getCreatedAt();

    case ID:
      return Long.valueOf(getId());

    case ID_STRING:
      return getIdString();

    case TEXT:
      return getText();

    case SOURCE:
      return getSource();

    case TRUNCATED:
      return Boolean.valueOf(isTruncated());

    case IN_REPLY_TO_STATUS_ID:
      return Boolean.valueOf(isInReplyToStatusId());

    case IN_REPLY_TO_STATUS_ID_STR:
      return Boolean.valueOf(isInReplyToStatusIdStr());

    case IN_REPLY_TO_USER_ID:
      return Boolean.valueOf(isInReplyToUserId());

    case IN_REPLY_TO_USER_ID_STR:
      return Boolean.valueOf(isInReplyToUserIdStr());

    case IN_REPLY_TO_SCREEN_NAME:
      return Boolean.valueOf(isInReplyToScreenName());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METADATA:
      return isSetMetadata();
    case CREATED_AT:
      return isSetCreatedAt();
    case ID:
      return isSetId();
    case ID_STRING:
      return isSetIdString();
    case TEXT:
      return isSetText();
    case SOURCE:
      return isSetSource();
    case TRUNCATED:
      return isSetTruncated();
    case IN_REPLY_TO_STATUS_ID:
      return isSetInReplyToStatusId();
    case IN_REPLY_TO_STATUS_ID_STR:
      return isSetInReplyToStatusIdStr();
    case IN_REPLY_TO_USER_ID:
      return isSetInReplyToUserId();
    case IN_REPLY_TO_USER_ID_STR:
      return isSetInReplyToUserIdStr();
    case IN_REPLY_TO_SCREEN_NAME:
      return isSetInReplyToScreenName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Status)
      return this.equals((Status)that);
    return false;
  }

  public boolean equals(Status that) {
    if (that == null)
      return false;

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_idString = true && this.isSetIdString();
    boolean that_present_idString = true && that.isSetIdString();
    if (this_present_idString || that_present_idString) {
      if (!(this_present_idString && that_present_idString))
        return false;
      if (!this.idString.equals(that.idString))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_truncated = true;
    boolean that_present_truncated = true;
    if (this_present_truncated || that_present_truncated) {
      if (!(this_present_truncated && that_present_truncated))
        return false;
      if (this.truncated != that.truncated)
        return false;
    }

    boolean this_present_inReplyToStatusId = true;
    boolean that_present_inReplyToStatusId = true;
    if (this_present_inReplyToStatusId || that_present_inReplyToStatusId) {
      if (!(this_present_inReplyToStatusId && that_present_inReplyToStatusId))
        return false;
      if (this.inReplyToStatusId != that.inReplyToStatusId)
        return false;
    }

    boolean this_present_inReplyToStatusIdStr = true;
    boolean that_present_inReplyToStatusIdStr = true;
    if (this_present_inReplyToStatusIdStr || that_present_inReplyToStatusIdStr) {
      if (!(this_present_inReplyToStatusIdStr && that_present_inReplyToStatusIdStr))
        return false;
      if (this.inReplyToStatusIdStr != that.inReplyToStatusIdStr)
        return false;
    }

    boolean this_present_inReplyToUserId = true;
    boolean that_present_inReplyToUserId = true;
    if (this_present_inReplyToUserId || that_present_inReplyToUserId) {
      if (!(this_present_inReplyToUserId && that_present_inReplyToUserId))
        return false;
      if (this.inReplyToUserId != that.inReplyToUserId)
        return false;
    }

    boolean this_present_inReplyToUserIdStr = true;
    boolean that_present_inReplyToUserIdStr = true;
    if (this_present_inReplyToUserIdStr || that_present_inReplyToUserIdStr) {
      if (!(this_present_inReplyToUserIdStr && that_present_inReplyToUserIdStr))
        return false;
      if (this.inReplyToUserIdStr != that.inReplyToUserIdStr)
        return false;
    }

    boolean this_present_inReplyToScreenName = true;
    boolean that_present_inReplyToScreenName = true;
    if (this_present_inReplyToScreenName || that_present_inReplyToScreenName) {
      if (!(this_present_inReplyToScreenName && that_present_inReplyToScreenName))
        return false;
      if (this.inReplyToScreenName != that.inReplyToScreenName)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Status other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdString()).compareTo(other.isSetIdString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idString, other.idString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTruncated()).compareTo(other.isSetTruncated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruncated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.truncated, other.truncated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReplyToStatusId()).compareTo(other.isSetInReplyToStatusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToStatusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToStatusId, other.inReplyToStatusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReplyToStatusIdStr()).compareTo(other.isSetInReplyToStatusIdStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToStatusIdStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToStatusIdStr, other.inReplyToStatusIdStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReplyToUserId()).compareTo(other.isSetInReplyToUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToUserId, other.inReplyToUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReplyToUserIdStr()).compareTo(other.isSetInReplyToUserIdStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToUserIdStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToUserIdStr, other.inReplyToUserIdStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInReplyToScreenName()).compareTo(other.isSetInReplyToScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToScreenName, other.inReplyToScreenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Status(");
    boolean first = true;

    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idString:");
    if (this.idString == null) {
      sb.append("null");
    } else {
      sb.append(this.idString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("truncated:");
    sb.append(this.truncated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inReplyToStatusId:");
    sb.append(this.inReplyToStatusId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inReplyToStatusIdStr:");
    sb.append(this.inReplyToStatusIdStr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inReplyToUserId:");
    sb.append(this.inReplyToUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inReplyToUserIdStr:");
    sb.append(this.inReplyToUserIdStr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inReplyToScreenName:");
    sb.append(this.inReplyToScreenName);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    if (createdAt == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (idString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'idString' was not present! Struct: " + toString());
    }
    if (text == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'text' was not present! Struct: " + toString());
    }
    if (source == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'truncated' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inReplyToStatusId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inReplyToStatusIdStr' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inReplyToUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inReplyToUserIdStr' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'inReplyToScreenName' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (metadata != null) {
      metadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusStandardSchemeFactory implements SchemeFactory {
    public StatusStandardScheme getScheme() {
      return new StatusStandardScheme();
    }
  }

  private static class StatusStandardScheme extends StandardScheme<Status> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Status struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new StatusMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idString = iprot.readString();
              struct.setIdStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRUNCATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.truncated = iprot.readBool();
              struct.setTruncatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IN_REPLY_TO_STATUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inReplyToStatusId = iprot.readBool();
              struct.setInReplyToStatusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IN_REPLY_TO_STATUS_ID_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inReplyToStatusIdStr = iprot.readBool();
              struct.setInReplyToStatusIdStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IN_REPLY_TO_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inReplyToUserId = iprot.readBool();
              struct.setInReplyToUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IN_REPLY_TO_USER_ID_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inReplyToUserIdStr = iprot.readBool();
              struct.setInReplyToUserIdStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IN_REPLY_TO_SCREEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inReplyToScreenName = iprot.readBool();
              struct.setInReplyToScreenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTruncated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'truncated' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInReplyToStatusId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inReplyToStatusId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInReplyToStatusIdStr()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inReplyToStatusIdStr' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInReplyToUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inReplyToUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInReplyToUserIdStr()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inReplyToUserIdStr' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInReplyToScreenName()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'inReplyToScreenName' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Status struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.idString != null) {
        oprot.writeFieldBegin(ID_STRING_FIELD_DESC);
        oprot.writeString(struct.idString);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRUNCATED_FIELD_DESC);
      oprot.writeBool(struct.truncated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_REPLY_TO_STATUS_ID_FIELD_DESC);
      oprot.writeBool(struct.inReplyToStatusId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_REPLY_TO_STATUS_ID_STR_FIELD_DESC);
      oprot.writeBool(struct.inReplyToStatusIdStr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_REPLY_TO_USER_ID_FIELD_DESC);
      oprot.writeBool(struct.inReplyToUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_REPLY_TO_USER_ID_STR_FIELD_DESC);
      oprot.writeBool(struct.inReplyToUserIdStr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IN_REPLY_TO_SCREEN_NAME_FIELD_DESC);
      oprot.writeBool(struct.inReplyToScreenName);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusTupleSchemeFactory implements SchemeFactory {
    public StatusTupleScheme getScheme() {
      return new StatusTupleScheme();
    }
  }

  private static class StatusTupleScheme extends TupleScheme<Status> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Status struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.metadata.write(oprot);
      oprot.writeString(struct.createdAt);
      oprot.writeI64(struct.id);
      oprot.writeString(struct.idString);
      oprot.writeString(struct.text);
      oprot.writeString(struct.source);
      oprot.writeBool(struct.truncated);
      oprot.writeBool(struct.inReplyToStatusId);
      oprot.writeBool(struct.inReplyToStatusIdStr);
      oprot.writeBool(struct.inReplyToUserId);
      oprot.writeBool(struct.inReplyToUserIdStr);
      oprot.writeBool(struct.inReplyToScreenName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Status struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.metadata = new StatusMetadata();
      struct.metadata.read(iprot);
      struct.setMetadataIsSet(true);
      struct.createdAt = iprot.readString();
      struct.setCreatedAtIsSet(true);
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.idString = iprot.readString();
      struct.setIdStringIsSet(true);
      struct.text = iprot.readString();
      struct.setTextIsSet(true);
      struct.source = iprot.readString();
      struct.setSourceIsSet(true);
      struct.truncated = iprot.readBool();
      struct.setTruncatedIsSet(true);
      struct.inReplyToStatusId = iprot.readBool();
      struct.setInReplyToStatusIdIsSet(true);
      struct.inReplyToStatusIdStr = iprot.readBool();
      struct.setInReplyToStatusIdStrIsSet(true);
      struct.inReplyToUserId = iprot.readBool();
      struct.setInReplyToUserIdIsSet(true);
      struct.inReplyToUserIdStr = iprot.readBool();
      struct.setInReplyToUserIdStrIsSet(true);
      struct.inReplyToScreenName = iprot.readBool();
      struct.setInReplyToScreenNameIsSet(true);
    }
  }

}

