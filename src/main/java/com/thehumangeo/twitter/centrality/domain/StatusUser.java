/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thehumangeo.twitter.centrality.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatusUser implements org.apache.thrift.TBase<StatusUser, StatusUser._Fields>, java.io.Serializable, Cloneable, Comparable<StatusUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusUser");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("idString", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("screenName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROFILE_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("profileLocation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PROTECT_FIELD_DESC = new org.apache.thrift.protocol.TField("protect", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField FOLLOWERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followersCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FRIENDS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("friendsCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LISTED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("listedCount", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField FAVOURITES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("favouritesCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UTC_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("utcOffset", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeZone", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField GEO_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("geoEnabled", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField VERIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("verified", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField STATUSES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusesCount", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CONTRIBUTORS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("contributorsEnabled", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField IS_TRANSLATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("isTranslator", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField IS_TRANSLATION_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isTranslationEnabled", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField PROFILE_BACKGROUND_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("profileBackgroundColor", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField PROFILE_BACKGROUND_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("profileBackgroundImageUrl", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PROFILE_BACKGROUND_IMAGE_URL_HTTPS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileBackgroundImageUrlHttps", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField PROFILE_BACKGROUND_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("profileBackgroundTitle", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField PROFILE_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImageUrl", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField PROFILE_IMAGE_URL_HTTPS_FIELD_DESC = new org.apache.thrift.protocol.TField("profileImageUrlHttps", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField PROFILE_LINK_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("profileLinkColor", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField PROFILE_SIDEBAR_BORDER_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("profileSidebarBorderColor", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField PROFILESIDEBAR_FILL_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("profilesidebarFillColor", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField PROFILE_TEXT_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("profileTextColor", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PROFILE_USE_BACKGROUND_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("profileUseBackgroundImage", org.apache.thrift.protocol.TType.BOOL, (short)35);
  private static final org.apache.thrift.protocol.TField DEFAULT_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultProfile", org.apache.thrift.protocol.TType.BOOL, (short)36);
  private static final org.apache.thrift.protocol.TField DEFAULT_PROFILE_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultProfileImage", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField FOLLOWING_FIELD_DESC = new org.apache.thrift.protocol.TField("following", org.apache.thrift.protocol.TType.BOOL, (short)38);
  private static final org.apache.thrift.protocol.TField FOLLOW_REQUEST_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("followRequestSent", org.apache.thrift.protocol.TType.BOOL, (short)39);
  private static final org.apache.thrift.protocol.TField NOTIFICATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("notifications", org.apache.thrift.protocol.TType.STRING, (short)40);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatusUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatusUserTupleSchemeFactory());
  }

  public long id; // required
  public String idString; // required
  public String name; // required
  public String screenName; // required
  public String location; // required
  public String profileLocation; // optional
  public String description; // required
  public String url; // optional
  public StatusUserEntities entities; // required
  public boolean protect; // required
  public int followersCount; // required
  public int friendsCount; // required
  public int listedCount; // required
  public String createdAt; // required
  public int favouritesCount; // required
  public int utcOffset; // required
  public String timeZone; // required
  public boolean geoEnabled; // required
  public boolean verified; // required
  public int statusesCount; // required
  public String lang; // required
  public boolean contributorsEnabled; // required
  public boolean isTranslator; // required
  public boolean isTranslationEnabled; // required
  public String profileBackgroundColor; // required
  public String profileBackgroundImageUrl; // required
  public String profileBackgroundImageUrlHttps; // required
  public boolean profileBackgroundTitle; // required
  public String profileImageUrl; // required
  public String profileImageUrlHttps; // required
  public String profileLinkColor; // required
  public String profileSidebarBorderColor; // required
  public String profilesidebarFillColor; // required
  public String profileTextColor; // required
  public boolean profileUseBackgroundImage; // required
  public boolean defaultProfile; // required
  public boolean defaultProfileImage; // required
  public boolean following; // optional
  public boolean followRequestSent; // optional
  public String notifications; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ID_STRING((short)2, "idString"),
    NAME((short)3, "name"),
    SCREEN_NAME((short)4, "screenName"),
    LOCATION((short)5, "location"),
    PROFILE_LOCATION((short)6, "profileLocation"),
    DESCRIPTION((short)7, "description"),
    URL((short)8, "url"),
    ENTITIES((short)9, "entities"),
    PROTECT((short)10, "protect"),
    FOLLOWERS_COUNT((short)11, "followersCount"),
    FRIENDS_COUNT((short)12, "friendsCount"),
    LISTED_COUNT((short)13, "listedCount"),
    CREATED_AT((short)14, "createdAt"),
    FAVOURITES_COUNT((short)15, "favouritesCount"),
    UTC_OFFSET((short)16, "utcOffset"),
    TIME_ZONE((short)17, "timeZone"),
    GEO_ENABLED((short)18, "geoEnabled"),
    VERIFIED((short)19, "verified"),
    STATUSES_COUNT((short)20, "statusesCount"),
    LANG((short)21, "lang"),
    CONTRIBUTORS_ENABLED((short)22, "contributorsEnabled"),
    IS_TRANSLATOR((short)23, "isTranslator"),
    IS_TRANSLATION_ENABLED((short)24, "isTranslationEnabled"),
    PROFILE_BACKGROUND_COLOR((short)25, "profileBackgroundColor"),
    PROFILE_BACKGROUND_IMAGE_URL((short)26, "profileBackgroundImageUrl"),
    PROFILE_BACKGROUND_IMAGE_URL_HTTPS((short)27, "profileBackgroundImageUrlHttps"),
    PROFILE_BACKGROUND_TITLE((short)28, "profileBackgroundTitle"),
    PROFILE_IMAGE_URL((short)29, "profileImageUrl"),
    PROFILE_IMAGE_URL_HTTPS((short)30, "profileImageUrlHttps"),
    PROFILE_LINK_COLOR((short)31, "profileLinkColor"),
    PROFILE_SIDEBAR_BORDER_COLOR((short)32, "profileSidebarBorderColor"),
    PROFILESIDEBAR_FILL_COLOR((short)33, "profilesidebarFillColor"),
    PROFILE_TEXT_COLOR((short)34, "profileTextColor"),
    PROFILE_USE_BACKGROUND_IMAGE((short)35, "profileUseBackgroundImage"),
    DEFAULT_PROFILE((short)36, "defaultProfile"),
    DEFAULT_PROFILE_IMAGE((short)37, "defaultProfileImage"),
    FOLLOWING((short)38, "following"),
    FOLLOW_REQUEST_SENT((short)39, "followRequestSent"),
    NOTIFICATIONS((short)40, "notifications");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ID_STRING
          return ID_STRING;
        case 3: // NAME
          return NAME;
        case 4: // SCREEN_NAME
          return SCREEN_NAME;
        case 5: // LOCATION
          return LOCATION;
        case 6: // PROFILE_LOCATION
          return PROFILE_LOCATION;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        case 8: // URL
          return URL;
        case 9: // ENTITIES
          return ENTITIES;
        case 10: // PROTECT
          return PROTECT;
        case 11: // FOLLOWERS_COUNT
          return FOLLOWERS_COUNT;
        case 12: // FRIENDS_COUNT
          return FRIENDS_COUNT;
        case 13: // LISTED_COUNT
          return LISTED_COUNT;
        case 14: // CREATED_AT
          return CREATED_AT;
        case 15: // FAVOURITES_COUNT
          return FAVOURITES_COUNT;
        case 16: // UTC_OFFSET
          return UTC_OFFSET;
        case 17: // TIME_ZONE
          return TIME_ZONE;
        case 18: // GEO_ENABLED
          return GEO_ENABLED;
        case 19: // VERIFIED
          return VERIFIED;
        case 20: // STATUSES_COUNT
          return STATUSES_COUNT;
        case 21: // LANG
          return LANG;
        case 22: // CONTRIBUTORS_ENABLED
          return CONTRIBUTORS_ENABLED;
        case 23: // IS_TRANSLATOR
          return IS_TRANSLATOR;
        case 24: // IS_TRANSLATION_ENABLED
          return IS_TRANSLATION_ENABLED;
        case 25: // PROFILE_BACKGROUND_COLOR
          return PROFILE_BACKGROUND_COLOR;
        case 26: // PROFILE_BACKGROUND_IMAGE_URL
          return PROFILE_BACKGROUND_IMAGE_URL;
        case 27: // PROFILE_BACKGROUND_IMAGE_URL_HTTPS
          return PROFILE_BACKGROUND_IMAGE_URL_HTTPS;
        case 28: // PROFILE_BACKGROUND_TITLE
          return PROFILE_BACKGROUND_TITLE;
        case 29: // PROFILE_IMAGE_URL
          return PROFILE_IMAGE_URL;
        case 30: // PROFILE_IMAGE_URL_HTTPS
          return PROFILE_IMAGE_URL_HTTPS;
        case 31: // PROFILE_LINK_COLOR
          return PROFILE_LINK_COLOR;
        case 32: // PROFILE_SIDEBAR_BORDER_COLOR
          return PROFILE_SIDEBAR_BORDER_COLOR;
        case 33: // PROFILESIDEBAR_FILL_COLOR
          return PROFILESIDEBAR_FILL_COLOR;
        case 34: // PROFILE_TEXT_COLOR
          return PROFILE_TEXT_COLOR;
        case 35: // PROFILE_USE_BACKGROUND_IMAGE
          return PROFILE_USE_BACKGROUND_IMAGE;
        case 36: // DEFAULT_PROFILE
          return DEFAULT_PROFILE;
        case 37: // DEFAULT_PROFILE_IMAGE
          return DEFAULT_PROFILE_IMAGE;
        case 38: // FOLLOWING
          return FOLLOWING;
        case 39: // FOLLOW_REQUEST_SENT
          return FOLLOW_REQUEST_SENT;
        case 40: // NOTIFICATIONS
          return NOTIFICATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PROTECT_ISSET_ID = 1;
  private static final int __FOLLOWERSCOUNT_ISSET_ID = 2;
  private static final int __FRIENDSCOUNT_ISSET_ID = 3;
  private static final int __LISTEDCOUNT_ISSET_ID = 4;
  private static final int __FAVOURITESCOUNT_ISSET_ID = 5;
  private static final int __UTCOFFSET_ISSET_ID = 6;
  private static final int __GEOENABLED_ISSET_ID = 7;
  private static final int __VERIFIED_ISSET_ID = 8;
  private static final int __STATUSESCOUNT_ISSET_ID = 9;
  private static final int __CONTRIBUTORSENABLED_ISSET_ID = 10;
  private static final int __ISTRANSLATOR_ISSET_ID = 11;
  private static final int __ISTRANSLATIONENABLED_ISSET_ID = 12;
  private static final int __PROFILEBACKGROUNDTITLE_ISSET_ID = 13;
  private static final int __PROFILEUSEBACKGROUNDIMAGE_ISSET_ID = 14;
  private static final int __DEFAULTPROFILE_ISSET_ID = 15;
  private static final int __DEFAULTPROFILEIMAGE_ISSET_ID = 16;
  private static final int __FOLLOWING_ISSET_ID = 17;
  private static final int __FOLLOWREQUESTSENT_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PROFILE_LOCATION,_Fields.URL,_Fields.FOLLOWING,_Fields.FOLLOW_REQUEST_SENT,_Fields.NOTIFICATIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID_STRING, new org.apache.thrift.meta_data.FieldMetaData("idString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("screenName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("profileLocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusUserEntities.class)));
    tmpMap.put(_Fields.PROTECT, new org.apache.thrift.meta_data.FieldMetaData("protect", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOLLOWERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followersCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRIENDS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("friendsCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LISTED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("listedCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAVOURITES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("favouritesCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UTC_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("utcOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("timeZone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("geoEnabled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VERIFIED, new org.apache.thrift.meta_data.FieldMetaData("verified", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUSES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("statusesCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRIBUTORS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("contributorsEnabled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_TRANSLATOR, new org.apache.thrift.meta_data.FieldMetaData("isTranslator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_TRANSLATION_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isTranslationEnabled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROFILE_BACKGROUND_COLOR, new org.apache.thrift.meta_data.FieldMetaData("profileBackgroundColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_BACKGROUND_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("profileBackgroundImageUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_BACKGROUND_IMAGE_URL_HTTPS, new org.apache.thrift.meta_data.FieldMetaData("profileBackgroundImageUrlHttps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_BACKGROUND_TITLE, new org.apache.thrift.meta_data.FieldMetaData("profileBackgroundTitle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROFILE_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("profileImageUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_IMAGE_URL_HTTPS, new org.apache.thrift.meta_data.FieldMetaData("profileImageUrlHttps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_LINK_COLOR, new org.apache.thrift.meta_data.FieldMetaData("profileLinkColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_SIDEBAR_BORDER_COLOR, new org.apache.thrift.meta_data.FieldMetaData("profileSidebarBorderColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILESIDEBAR_FILL_COLOR, new org.apache.thrift.meta_data.FieldMetaData("profilesidebarFillColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_TEXT_COLOR, new org.apache.thrift.meta_data.FieldMetaData("profileTextColor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFILE_USE_BACKGROUND_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("profileUseBackgroundImage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("defaultProfile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PROFILE_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("defaultProfileImage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOLLOWING, new org.apache.thrift.meta_data.FieldMetaData("following", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOLLOW_REQUEST_SENT, new org.apache.thrift.meta_data.FieldMetaData("followRequestSent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATIONS, new org.apache.thrift.meta_data.FieldMetaData("notifications", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusUser.class, metaDataMap);
  }

  public StatusUser() {
  }

  public StatusUser(
    long id,
    String idString,
    String name,
    String screenName,
    String location,
    String description,
    StatusUserEntities entities,
    boolean protect,
    int followersCount,
    int friendsCount,
    int listedCount,
    String createdAt,
    int favouritesCount,
    int utcOffset,
    String timeZone,
    boolean geoEnabled,
    boolean verified,
    int statusesCount,
    String lang,
    boolean contributorsEnabled,
    boolean isTranslator,
    boolean isTranslationEnabled,
    String profileBackgroundColor,
    String profileBackgroundImageUrl,
    String profileBackgroundImageUrlHttps,
    boolean profileBackgroundTitle,
    String profileImageUrl,
    String profileImageUrlHttps,
    String profileLinkColor,
    String profileSidebarBorderColor,
    String profilesidebarFillColor,
    String profileTextColor,
    boolean profileUseBackgroundImage,
    boolean defaultProfile,
    boolean defaultProfileImage)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.idString = idString;
    this.name = name;
    this.screenName = screenName;
    this.location = location;
    this.description = description;
    this.entities = entities;
    this.protect = protect;
    setProtectIsSet(true);
    this.followersCount = followersCount;
    setFollowersCountIsSet(true);
    this.friendsCount = friendsCount;
    setFriendsCountIsSet(true);
    this.listedCount = listedCount;
    setListedCountIsSet(true);
    this.createdAt = createdAt;
    this.favouritesCount = favouritesCount;
    setFavouritesCountIsSet(true);
    this.utcOffset = utcOffset;
    setUtcOffsetIsSet(true);
    this.timeZone = timeZone;
    this.geoEnabled = geoEnabled;
    setGeoEnabledIsSet(true);
    this.verified = verified;
    setVerifiedIsSet(true);
    this.statusesCount = statusesCount;
    setStatusesCountIsSet(true);
    this.lang = lang;
    this.contributorsEnabled = contributorsEnabled;
    setContributorsEnabledIsSet(true);
    this.isTranslator = isTranslator;
    setIsTranslatorIsSet(true);
    this.isTranslationEnabled = isTranslationEnabled;
    setIsTranslationEnabledIsSet(true);
    this.profileBackgroundColor = profileBackgroundColor;
    this.profileBackgroundImageUrl = profileBackgroundImageUrl;
    this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps;
    this.profileBackgroundTitle = profileBackgroundTitle;
    setProfileBackgroundTitleIsSet(true);
    this.profileImageUrl = profileImageUrl;
    this.profileImageUrlHttps = profileImageUrlHttps;
    this.profileLinkColor = profileLinkColor;
    this.profileSidebarBorderColor = profileSidebarBorderColor;
    this.profilesidebarFillColor = profilesidebarFillColor;
    this.profileTextColor = profileTextColor;
    this.profileUseBackgroundImage = profileUseBackgroundImage;
    setProfileUseBackgroundImageIsSet(true);
    this.defaultProfile = defaultProfile;
    setDefaultProfileIsSet(true);
    this.defaultProfileImage = defaultProfileImage;
    setDefaultProfileImageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusUser(StatusUser other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetIdString()) {
      this.idString = other.idString;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetScreenName()) {
      this.screenName = other.screenName;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetProfileLocation()) {
      this.profileLocation = other.profileLocation;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetEntities()) {
      this.entities = new StatusUserEntities(other.entities);
    }
    this.protect = other.protect;
    this.followersCount = other.followersCount;
    this.friendsCount = other.friendsCount;
    this.listedCount = other.listedCount;
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    this.favouritesCount = other.favouritesCount;
    this.utcOffset = other.utcOffset;
    if (other.isSetTimeZone()) {
      this.timeZone = other.timeZone;
    }
    this.geoEnabled = other.geoEnabled;
    this.verified = other.verified;
    this.statusesCount = other.statusesCount;
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    this.contributorsEnabled = other.contributorsEnabled;
    this.isTranslator = other.isTranslator;
    this.isTranslationEnabled = other.isTranslationEnabled;
    if (other.isSetProfileBackgroundColor()) {
      this.profileBackgroundColor = other.profileBackgroundColor;
    }
    if (other.isSetProfileBackgroundImageUrl()) {
      this.profileBackgroundImageUrl = other.profileBackgroundImageUrl;
    }
    if (other.isSetProfileBackgroundImageUrlHttps()) {
      this.profileBackgroundImageUrlHttps = other.profileBackgroundImageUrlHttps;
    }
    this.profileBackgroundTitle = other.profileBackgroundTitle;
    if (other.isSetProfileImageUrl()) {
      this.profileImageUrl = other.profileImageUrl;
    }
    if (other.isSetProfileImageUrlHttps()) {
      this.profileImageUrlHttps = other.profileImageUrlHttps;
    }
    if (other.isSetProfileLinkColor()) {
      this.profileLinkColor = other.profileLinkColor;
    }
    if (other.isSetProfileSidebarBorderColor()) {
      this.profileSidebarBorderColor = other.profileSidebarBorderColor;
    }
    if (other.isSetProfilesidebarFillColor()) {
      this.profilesidebarFillColor = other.profilesidebarFillColor;
    }
    if (other.isSetProfileTextColor()) {
      this.profileTextColor = other.profileTextColor;
    }
    this.profileUseBackgroundImage = other.profileUseBackgroundImage;
    this.defaultProfile = other.defaultProfile;
    this.defaultProfileImage = other.defaultProfileImage;
    this.following = other.following;
    this.followRequestSent = other.followRequestSent;
    if (other.isSetNotifications()) {
      this.notifications = other.notifications;
    }
  }

  public StatusUser deepCopy() {
    return new StatusUser(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.idString = null;
    this.name = null;
    this.screenName = null;
    this.location = null;
    this.profileLocation = null;
    this.description = null;
    this.url = null;
    this.entities = null;
    setProtectIsSet(false);
    this.protect = false;
    setFollowersCountIsSet(false);
    this.followersCount = 0;
    setFriendsCountIsSet(false);
    this.friendsCount = 0;
    setListedCountIsSet(false);
    this.listedCount = 0;
    this.createdAt = null;
    setFavouritesCountIsSet(false);
    this.favouritesCount = 0;
    setUtcOffsetIsSet(false);
    this.utcOffset = 0;
    this.timeZone = null;
    setGeoEnabledIsSet(false);
    this.geoEnabled = false;
    setVerifiedIsSet(false);
    this.verified = false;
    setStatusesCountIsSet(false);
    this.statusesCount = 0;
    this.lang = null;
    setContributorsEnabledIsSet(false);
    this.contributorsEnabled = false;
    setIsTranslatorIsSet(false);
    this.isTranslator = false;
    setIsTranslationEnabledIsSet(false);
    this.isTranslationEnabled = false;
    this.profileBackgroundColor = null;
    this.profileBackgroundImageUrl = null;
    this.profileBackgroundImageUrlHttps = null;
    setProfileBackgroundTitleIsSet(false);
    this.profileBackgroundTitle = false;
    this.profileImageUrl = null;
    this.profileImageUrlHttps = null;
    this.profileLinkColor = null;
    this.profileSidebarBorderColor = null;
    this.profilesidebarFillColor = null;
    this.profileTextColor = null;
    setProfileUseBackgroundImageIsSet(false);
    this.profileUseBackgroundImage = false;
    setDefaultProfileIsSet(false);
    this.defaultProfile = false;
    setDefaultProfileImageIsSet(false);
    this.defaultProfileImage = false;
    setFollowingIsSet(false);
    this.following = false;
    setFollowRequestSentIsSet(false);
    this.followRequestSent = false;
    this.notifications = null;
  }

  public long getId() {
    return this.id;
  }

  public StatusUser setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getIdString() {
    return this.idString;
  }

  public StatusUser setIdString(String idString) {
    this.idString = idString;
    return this;
  }

  public void unsetIdString() {
    this.idString = null;
  }

  /** Returns true if field idString is set (has been assigned a value) and false otherwise */
  public boolean isSetIdString() {
    return this.idString != null;
  }

  public void setIdStringIsSet(boolean value) {
    if (!value) {
      this.idString = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public StatusUser setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getScreenName() {
    return this.screenName;
  }

  public StatusUser setScreenName(String screenName) {
    this.screenName = screenName;
    return this;
  }

  public void unsetScreenName() {
    this.screenName = null;
  }

  /** Returns true if field screenName is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenName() {
    return this.screenName != null;
  }

  public void setScreenNameIsSet(boolean value) {
    if (!value) {
      this.screenName = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public StatusUser setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public String getProfileLocation() {
    return this.profileLocation;
  }

  public StatusUser setProfileLocation(String profileLocation) {
    this.profileLocation = profileLocation;
    return this;
  }

  public void unsetProfileLocation() {
    this.profileLocation = null;
  }

  /** Returns true if field profileLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileLocation() {
    return this.profileLocation != null;
  }

  public void setProfileLocationIsSet(boolean value) {
    if (!value) {
      this.profileLocation = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public StatusUser setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public StatusUser setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public StatusUserEntities getEntities() {
    return this.entities;
  }

  public StatusUser setEntities(StatusUserEntities entities) {
    this.entities = entities;
    return this;
  }

  public void unsetEntities() {
    this.entities = null;
  }

  /** Returns true if field entities is set (has been assigned a value) and false otherwise */
  public boolean isSetEntities() {
    return this.entities != null;
  }

  public void setEntitiesIsSet(boolean value) {
    if (!value) {
      this.entities = null;
    }
  }

  public boolean isProtect() {
    return this.protect;
  }

  public StatusUser setProtect(boolean protect) {
    this.protect = protect;
    setProtectIsSet(true);
    return this;
  }

  public void unsetProtect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROTECT_ISSET_ID);
  }

  /** Returns true if field protect is set (has been assigned a value) and false otherwise */
  public boolean isSetProtect() {
    return EncodingUtils.testBit(__isset_bitfield, __PROTECT_ISSET_ID);
  }

  public void setProtectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROTECT_ISSET_ID, value);
  }

  public int getFollowersCount() {
    return this.followersCount;
  }

  public StatusUser setFollowersCount(int followersCount) {
    this.followersCount = followersCount;
    setFollowersCountIsSet(true);
    return this;
  }

  public void unsetFollowersCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWERSCOUNT_ISSET_ID);
  }

  /** Returns true if field followersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowersCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWERSCOUNT_ISSET_ID);
  }

  public void setFollowersCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWERSCOUNT_ISSET_ID, value);
  }

  public int getFriendsCount() {
    return this.friendsCount;
  }

  public StatusUser setFriendsCount(int friendsCount) {
    this.friendsCount = friendsCount;
    setFriendsCountIsSet(true);
    return this;
  }

  public void unsetFriendsCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRIENDSCOUNT_ISSET_ID);
  }

  /** Returns true if field friendsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFriendsCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FRIENDSCOUNT_ISSET_ID);
  }

  public void setFriendsCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRIENDSCOUNT_ISSET_ID, value);
  }

  public int getListedCount() {
    return this.listedCount;
  }

  public StatusUser setListedCount(int listedCount) {
    this.listedCount = listedCount;
    setListedCountIsSet(true);
    return this;
  }

  public void unsetListedCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTEDCOUNT_ISSET_ID);
  }

  /** Returns true if field listedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetListedCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LISTEDCOUNT_ISSET_ID);
  }

  public void setListedCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTEDCOUNT_ISSET_ID, value);
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public StatusUser setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public int getFavouritesCount() {
    return this.favouritesCount;
  }

  public StatusUser setFavouritesCount(int favouritesCount) {
    this.favouritesCount = favouritesCount;
    setFavouritesCountIsSet(true);
    return this;
  }

  public void unsetFavouritesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAVOURITESCOUNT_ISSET_ID);
  }

  /** Returns true if field favouritesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFavouritesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FAVOURITESCOUNT_ISSET_ID);
  }

  public void setFavouritesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAVOURITESCOUNT_ISSET_ID, value);
  }

  public int getUtcOffset() {
    return this.utcOffset;
  }

  public StatusUser setUtcOffset(int utcOffset) {
    this.utcOffset = utcOffset;
    setUtcOffsetIsSet(true);
    return this;
  }

  public void unsetUtcOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UTCOFFSET_ISSET_ID);
  }

  /** Returns true if field utcOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetUtcOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __UTCOFFSET_ISSET_ID);
  }

  public void setUtcOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UTCOFFSET_ISSET_ID, value);
  }

  public String getTimeZone() {
    return this.timeZone;
  }

  public StatusUser setTimeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  public void unsetTimeZone() {
    this.timeZone = null;
  }

  /** Returns true if field timeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return this.timeZone != null;
  }

  public void setTimeZoneIsSet(boolean value) {
    if (!value) {
      this.timeZone = null;
    }
  }

  public boolean isGeoEnabled() {
    return this.geoEnabled;
  }

  public StatusUser setGeoEnabled(boolean geoEnabled) {
    this.geoEnabled = geoEnabled;
    setGeoEnabledIsSet(true);
    return this;
  }

  public void unsetGeoEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GEOENABLED_ISSET_ID);
  }

  /** Returns true if field geoEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __GEOENABLED_ISSET_ID);
  }

  public void setGeoEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GEOENABLED_ISSET_ID, value);
  }

  public boolean isVerified() {
    return this.verified;
  }

  public StatusUser setVerified(boolean verified) {
    this.verified = verified;
    setVerifiedIsSet(true);
    return this;
  }

  public void unsetVerified() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERIFIED_ISSET_ID);
  }

  /** Returns true if field verified is set (has been assigned a value) and false otherwise */
  public boolean isSetVerified() {
    return EncodingUtils.testBit(__isset_bitfield, __VERIFIED_ISSET_ID);
  }

  public void setVerifiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERIFIED_ISSET_ID, value);
  }

  public int getStatusesCount() {
    return this.statusesCount;
  }

  public StatusUser setStatusesCount(int statusesCount) {
    this.statusesCount = statusesCount;
    setStatusesCountIsSet(true);
    return this;
  }

  public void unsetStatusesCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSESCOUNT_ISSET_ID);
  }

  /** Returns true if field statusesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusesCount() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSESCOUNT_ISSET_ID);
  }

  public void setStatusesCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSESCOUNT_ISSET_ID, value);
  }

  public String getLang() {
    return this.lang;
  }

  public StatusUser setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public boolean isContributorsEnabled() {
    return this.contributorsEnabled;
  }

  public StatusUser setContributorsEnabled(boolean contributorsEnabled) {
    this.contributorsEnabled = contributorsEnabled;
    setContributorsEnabledIsSet(true);
    return this;
  }

  public void unsetContributorsEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRIBUTORSENABLED_ISSET_ID);
  }

  /** Returns true if field contributorsEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetContributorsEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRIBUTORSENABLED_ISSET_ID);
  }

  public void setContributorsEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRIBUTORSENABLED_ISSET_ID, value);
  }

  public boolean isIsTranslator() {
    return this.isTranslator;
  }

  public StatusUser setIsTranslator(boolean isTranslator) {
    this.isTranslator = isTranslator;
    setIsTranslatorIsSet(true);
    return this;
  }

  public void unsetIsTranslator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTRANSLATOR_ISSET_ID);
  }

  /** Returns true if field isTranslator is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTranslator() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTRANSLATOR_ISSET_ID);
  }

  public void setIsTranslatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTRANSLATOR_ISSET_ID, value);
  }

  public boolean isIsTranslationEnabled() {
    return this.isTranslationEnabled;
  }

  public StatusUser setIsTranslationEnabled(boolean isTranslationEnabled) {
    this.isTranslationEnabled = isTranslationEnabled;
    setIsTranslationEnabledIsSet(true);
    return this;
  }

  public void unsetIsTranslationEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTRANSLATIONENABLED_ISSET_ID);
  }

  /** Returns true if field isTranslationEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTranslationEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTRANSLATIONENABLED_ISSET_ID);
  }

  public void setIsTranslationEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTRANSLATIONENABLED_ISSET_ID, value);
  }

  public String getProfileBackgroundColor() {
    return this.profileBackgroundColor;
  }

  public StatusUser setProfileBackgroundColor(String profileBackgroundColor) {
    this.profileBackgroundColor = profileBackgroundColor;
    return this;
  }

  public void unsetProfileBackgroundColor() {
    this.profileBackgroundColor = null;
  }

  /** Returns true if field profileBackgroundColor is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileBackgroundColor() {
    return this.profileBackgroundColor != null;
  }

  public void setProfileBackgroundColorIsSet(boolean value) {
    if (!value) {
      this.profileBackgroundColor = null;
    }
  }

  public String getProfileBackgroundImageUrl() {
    return this.profileBackgroundImageUrl;
  }

  public StatusUser setProfileBackgroundImageUrl(String profileBackgroundImageUrl) {
    this.profileBackgroundImageUrl = profileBackgroundImageUrl;
    return this;
  }

  public void unsetProfileBackgroundImageUrl() {
    this.profileBackgroundImageUrl = null;
  }

  /** Returns true if field profileBackgroundImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileBackgroundImageUrl() {
    return this.profileBackgroundImageUrl != null;
  }

  public void setProfileBackgroundImageUrlIsSet(boolean value) {
    if (!value) {
      this.profileBackgroundImageUrl = null;
    }
  }

  public String getProfileBackgroundImageUrlHttps() {
    return this.profileBackgroundImageUrlHttps;
  }

  public StatusUser setProfileBackgroundImageUrlHttps(String profileBackgroundImageUrlHttps) {
    this.profileBackgroundImageUrlHttps = profileBackgroundImageUrlHttps;
    return this;
  }

  public void unsetProfileBackgroundImageUrlHttps() {
    this.profileBackgroundImageUrlHttps = null;
  }

  /** Returns true if field profileBackgroundImageUrlHttps is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileBackgroundImageUrlHttps() {
    return this.profileBackgroundImageUrlHttps != null;
  }

  public void setProfileBackgroundImageUrlHttpsIsSet(boolean value) {
    if (!value) {
      this.profileBackgroundImageUrlHttps = null;
    }
  }

  public boolean isProfileBackgroundTitle() {
    return this.profileBackgroundTitle;
  }

  public StatusUser setProfileBackgroundTitle(boolean profileBackgroundTitle) {
    this.profileBackgroundTitle = profileBackgroundTitle;
    setProfileBackgroundTitleIsSet(true);
    return this;
  }

  public void unsetProfileBackgroundTitle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILEBACKGROUNDTITLE_ISSET_ID);
  }

  /** Returns true if field profileBackgroundTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileBackgroundTitle() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILEBACKGROUNDTITLE_ISSET_ID);
  }

  public void setProfileBackgroundTitleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILEBACKGROUNDTITLE_ISSET_ID, value);
  }

  public String getProfileImageUrl() {
    return this.profileImageUrl;
  }

  public StatusUser setProfileImageUrl(String profileImageUrl) {
    this.profileImageUrl = profileImageUrl;
    return this;
  }

  public void unsetProfileImageUrl() {
    this.profileImageUrl = null;
  }

  /** Returns true if field profileImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImageUrl() {
    return this.profileImageUrl != null;
  }

  public void setProfileImageUrlIsSet(boolean value) {
    if (!value) {
      this.profileImageUrl = null;
    }
  }

  public String getProfileImageUrlHttps() {
    return this.profileImageUrlHttps;
  }

  public StatusUser setProfileImageUrlHttps(String profileImageUrlHttps) {
    this.profileImageUrlHttps = profileImageUrlHttps;
    return this;
  }

  public void unsetProfileImageUrlHttps() {
    this.profileImageUrlHttps = null;
  }

  /** Returns true if field profileImageUrlHttps is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImageUrlHttps() {
    return this.profileImageUrlHttps != null;
  }

  public void setProfileImageUrlHttpsIsSet(boolean value) {
    if (!value) {
      this.profileImageUrlHttps = null;
    }
  }

  public String getProfileLinkColor() {
    return this.profileLinkColor;
  }

  public StatusUser setProfileLinkColor(String profileLinkColor) {
    this.profileLinkColor = profileLinkColor;
    return this;
  }

  public void unsetProfileLinkColor() {
    this.profileLinkColor = null;
  }

  /** Returns true if field profileLinkColor is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileLinkColor() {
    return this.profileLinkColor != null;
  }

  public void setProfileLinkColorIsSet(boolean value) {
    if (!value) {
      this.profileLinkColor = null;
    }
  }

  public String getProfileSidebarBorderColor() {
    return this.profileSidebarBorderColor;
  }

  public StatusUser setProfileSidebarBorderColor(String profileSidebarBorderColor) {
    this.profileSidebarBorderColor = profileSidebarBorderColor;
    return this;
  }

  public void unsetProfileSidebarBorderColor() {
    this.profileSidebarBorderColor = null;
  }

  /** Returns true if field profileSidebarBorderColor is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileSidebarBorderColor() {
    return this.profileSidebarBorderColor != null;
  }

  public void setProfileSidebarBorderColorIsSet(boolean value) {
    if (!value) {
      this.profileSidebarBorderColor = null;
    }
  }

  public String getProfilesidebarFillColor() {
    return this.profilesidebarFillColor;
  }

  public StatusUser setProfilesidebarFillColor(String profilesidebarFillColor) {
    this.profilesidebarFillColor = profilesidebarFillColor;
    return this;
  }

  public void unsetProfilesidebarFillColor() {
    this.profilesidebarFillColor = null;
  }

  /** Returns true if field profilesidebarFillColor is set (has been assigned a value) and false otherwise */
  public boolean isSetProfilesidebarFillColor() {
    return this.profilesidebarFillColor != null;
  }

  public void setProfilesidebarFillColorIsSet(boolean value) {
    if (!value) {
      this.profilesidebarFillColor = null;
    }
  }

  public String getProfileTextColor() {
    return this.profileTextColor;
  }

  public StatusUser setProfileTextColor(String profileTextColor) {
    this.profileTextColor = profileTextColor;
    return this;
  }

  public void unsetProfileTextColor() {
    this.profileTextColor = null;
  }

  /** Returns true if field profileTextColor is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileTextColor() {
    return this.profileTextColor != null;
  }

  public void setProfileTextColorIsSet(boolean value) {
    if (!value) {
      this.profileTextColor = null;
    }
  }

  public boolean isProfileUseBackgroundImage() {
    return this.profileUseBackgroundImage;
  }

  public StatusUser setProfileUseBackgroundImage(boolean profileUseBackgroundImage) {
    this.profileUseBackgroundImage = profileUseBackgroundImage;
    setProfileUseBackgroundImageIsSet(true);
    return this;
  }

  public void unsetProfileUseBackgroundImage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROFILEUSEBACKGROUNDIMAGE_ISSET_ID);
  }

  /** Returns true if field profileUseBackgroundImage is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileUseBackgroundImage() {
    return EncodingUtils.testBit(__isset_bitfield, __PROFILEUSEBACKGROUNDIMAGE_ISSET_ID);
  }

  public void setProfileUseBackgroundImageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROFILEUSEBACKGROUNDIMAGE_ISSET_ID, value);
  }

  public boolean isDefaultProfile() {
    return this.defaultProfile;
  }

  public StatusUser setDefaultProfile(boolean defaultProfile) {
    this.defaultProfile = defaultProfile;
    setDefaultProfileIsSet(true);
    return this;
  }

  public void unsetDefaultProfile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTPROFILE_ISSET_ID);
  }

  /** Returns true if field defaultProfile is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultProfile() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTPROFILE_ISSET_ID);
  }

  public void setDefaultProfileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTPROFILE_ISSET_ID, value);
  }

  public boolean isDefaultProfileImage() {
    return this.defaultProfileImage;
  }

  public StatusUser setDefaultProfileImage(boolean defaultProfileImage) {
    this.defaultProfileImage = defaultProfileImage;
    setDefaultProfileImageIsSet(true);
    return this;
  }

  public void unsetDefaultProfileImage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTPROFILEIMAGE_ISSET_ID);
  }

  /** Returns true if field defaultProfileImage is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultProfileImage() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTPROFILEIMAGE_ISSET_ID);
  }

  public void setDefaultProfileImageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTPROFILEIMAGE_ISSET_ID, value);
  }

  public boolean isFollowing() {
    return this.following;
  }

  public StatusUser setFollowing(boolean following) {
    this.following = following;
    setFollowingIsSet(true);
    return this;
  }

  public void unsetFollowing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWING_ISSET_ID);
  }

  /** Returns true if field following is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowing() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWING_ISSET_ID);
  }

  public void setFollowingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWING_ISSET_ID, value);
  }

  public boolean isFollowRequestSent() {
    return this.followRequestSent;
  }

  public StatusUser setFollowRequestSent(boolean followRequestSent) {
    this.followRequestSent = followRequestSent;
    setFollowRequestSentIsSet(true);
    return this;
  }

  public void unsetFollowRequestSent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOLLOWREQUESTSENT_ISSET_ID);
  }

  /** Returns true if field followRequestSent is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowRequestSent() {
    return EncodingUtils.testBit(__isset_bitfield, __FOLLOWREQUESTSENT_ISSET_ID);
  }

  public void setFollowRequestSentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOLLOWREQUESTSENT_ISSET_ID, value);
  }

  public String getNotifications() {
    return this.notifications;
  }

  public StatusUser setNotifications(String notifications) {
    this.notifications = notifications;
    return this;
  }

  public void unsetNotifications() {
    this.notifications = null;
  }

  /** Returns true if field notifications is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifications() {
    return this.notifications != null;
  }

  public void setNotificationsIsSet(boolean value) {
    if (!value) {
      this.notifications = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ID_STRING:
      if (value == null) {
        unsetIdString();
      } else {
        setIdString((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SCREEN_NAME:
      if (value == null) {
        unsetScreenName();
      } else {
        setScreenName((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case PROFILE_LOCATION:
      if (value == null) {
        unsetProfileLocation();
      } else {
        setProfileLocation((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case ENTITIES:
      if (value == null) {
        unsetEntities();
      } else {
        setEntities((StatusUserEntities)value);
      }
      break;

    case PROTECT:
      if (value == null) {
        unsetProtect();
      } else {
        setProtect((Boolean)value);
      }
      break;

    case FOLLOWERS_COUNT:
      if (value == null) {
        unsetFollowersCount();
      } else {
        setFollowersCount((Integer)value);
      }
      break;

    case FRIENDS_COUNT:
      if (value == null) {
        unsetFriendsCount();
      } else {
        setFriendsCount((Integer)value);
      }
      break;

    case LISTED_COUNT:
      if (value == null) {
        unsetListedCount();
      } else {
        setListedCount((Integer)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case FAVOURITES_COUNT:
      if (value == null) {
        unsetFavouritesCount();
      } else {
        setFavouritesCount((Integer)value);
      }
      break;

    case UTC_OFFSET:
      if (value == null) {
        unsetUtcOffset();
      } else {
        setUtcOffset((Integer)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((String)value);
      }
      break;

    case GEO_ENABLED:
      if (value == null) {
        unsetGeoEnabled();
      } else {
        setGeoEnabled((Boolean)value);
      }
      break;

    case VERIFIED:
      if (value == null) {
        unsetVerified();
      } else {
        setVerified((Boolean)value);
      }
      break;

    case STATUSES_COUNT:
      if (value == null) {
        unsetStatusesCount();
      } else {
        setStatusesCount((Integer)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    case CONTRIBUTORS_ENABLED:
      if (value == null) {
        unsetContributorsEnabled();
      } else {
        setContributorsEnabled((Boolean)value);
      }
      break;

    case IS_TRANSLATOR:
      if (value == null) {
        unsetIsTranslator();
      } else {
        setIsTranslator((Boolean)value);
      }
      break;

    case IS_TRANSLATION_ENABLED:
      if (value == null) {
        unsetIsTranslationEnabled();
      } else {
        setIsTranslationEnabled((Boolean)value);
      }
      break;

    case PROFILE_BACKGROUND_COLOR:
      if (value == null) {
        unsetProfileBackgroundColor();
      } else {
        setProfileBackgroundColor((String)value);
      }
      break;

    case PROFILE_BACKGROUND_IMAGE_URL:
      if (value == null) {
        unsetProfileBackgroundImageUrl();
      } else {
        setProfileBackgroundImageUrl((String)value);
      }
      break;

    case PROFILE_BACKGROUND_IMAGE_URL_HTTPS:
      if (value == null) {
        unsetProfileBackgroundImageUrlHttps();
      } else {
        setProfileBackgroundImageUrlHttps((String)value);
      }
      break;

    case PROFILE_BACKGROUND_TITLE:
      if (value == null) {
        unsetProfileBackgroundTitle();
      } else {
        setProfileBackgroundTitle((Boolean)value);
      }
      break;

    case PROFILE_IMAGE_URL:
      if (value == null) {
        unsetProfileImageUrl();
      } else {
        setProfileImageUrl((String)value);
      }
      break;

    case PROFILE_IMAGE_URL_HTTPS:
      if (value == null) {
        unsetProfileImageUrlHttps();
      } else {
        setProfileImageUrlHttps((String)value);
      }
      break;

    case PROFILE_LINK_COLOR:
      if (value == null) {
        unsetProfileLinkColor();
      } else {
        setProfileLinkColor((String)value);
      }
      break;

    case PROFILE_SIDEBAR_BORDER_COLOR:
      if (value == null) {
        unsetProfileSidebarBorderColor();
      } else {
        setProfileSidebarBorderColor((String)value);
      }
      break;

    case PROFILESIDEBAR_FILL_COLOR:
      if (value == null) {
        unsetProfilesidebarFillColor();
      } else {
        setProfilesidebarFillColor((String)value);
      }
      break;

    case PROFILE_TEXT_COLOR:
      if (value == null) {
        unsetProfileTextColor();
      } else {
        setProfileTextColor((String)value);
      }
      break;

    case PROFILE_USE_BACKGROUND_IMAGE:
      if (value == null) {
        unsetProfileUseBackgroundImage();
      } else {
        setProfileUseBackgroundImage((Boolean)value);
      }
      break;

    case DEFAULT_PROFILE:
      if (value == null) {
        unsetDefaultProfile();
      } else {
        setDefaultProfile((Boolean)value);
      }
      break;

    case DEFAULT_PROFILE_IMAGE:
      if (value == null) {
        unsetDefaultProfileImage();
      } else {
        setDefaultProfileImage((Boolean)value);
      }
      break;

    case FOLLOWING:
      if (value == null) {
        unsetFollowing();
      } else {
        setFollowing((Boolean)value);
      }
      break;

    case FOLLOW_REQUEST_SENT:
      if (value == null) {
        unsetFollowRequestSent();
      } else {
        setFollowRequestSent((Boolean)value);
      }
      break;

    case NOTIFICATIONS:
      if (value == null) {
        unsetNotifications();
      } else {
        setNotifications((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case ID_STRING:
      return getIdString();

    case NAME:
      return getName();

    case SCREEN_NAME:
      return getScreenName();

    case LOCATION:
      return getLocation();

    case PROFILE_LOCATION:
      return getProfileLocation();

    case DESCRIPTION:
      return getDescription();

    case URL:
      return getUrl();

    case ENTITIES:
      return getEntities();

    case PROTECT:
      return Boolean.valueOf(isProtect());

    case FOLLOWERS_COUNT:
      return Integer.valueOf(getFollowersCount());

    case FRIENDS_COUNT:
      return Integer.valueOf(getFriendsCount());

    case LISTED_COUNT:
      return Integer.valueOf(getListedCount());

    case CREATED_AT:
      return getCreatedAt();

    case FAVOURITES_COUNT:
      return Integer.valueOf(getFavouritesCount());

    case UTC_OFFSET:
      return Integer.valueOf(getUtcOffset());

    case TIME_ZONE:
      return getTimeZone();

    case GEO_ENABLED:
      return Boolean.valueOf(isGeoEnabled());

    case VERIFIED:
      return Boolean.valueOf(isVerified());

    case STATUSES_COUNT:
      return Integer.valueOf(getStatusesCount());

    case LANG:
      return getLang();

    case CONTRIBUTORS_ENABLED:
      return Boolean.valueOf(isContributorsEnabled());

    case IS_TRANSLATOR:
      return Boolean.valueOf(isIsTranslator());

    case IS_TRANSLATION_ENABLED:
      return Boolean.valueOf(isIsTranslationEnabled());

    case PROFILE_BACKGROUND_COLOR:
      return getProfileBackgroundColor();

    case PROFILE_BACKGROUND_IMAGE_URL:
      return getProfileBackgroundImageUrl();

    case PROFILE_BACKGROUND_IMAGE_URL_HTTPS:
      return getProfileBackgroundImageUrlHttps();

    case PROFILE_BACKGROUND_TITLE:
      return Boolean.valueOf(isProfileBackgroundTitle());

    case PROFILE_IMAGE_URL:
      return getProfileImageUrl();

    case PROFILE_IMAGE_URL_HTTPS:
      return getProfileImageUrlHttps();

    case PROFILE_LINK_COLOR:
      return getProfileLinkColor();

    case PROFILE_SIDEBAR_BORDER_COLOR:
      return getProfileSidebarBorderColor();

    case PROFILESIDEBAR_FILL_COLOR:
      return getProfilesidebarFillColor();

    case PROFILE_TEXT_COLOR:
      return getProfileTextColor();

    case PROFILE_USE_BACKGROUND_IMAGE:
      return Boolean.valueOf(isProfileUseBackgroundImage());

    case DEFAULT_PROFILE:
      return Boolean.valueOf(isDefaultProfile());

    case DEFAULT_PROFILE_IMAGE:
      return Boolean.valueOf(isDefaultProfileImage());

    case FOLLOWING:
      return Boolean.valueOf(isFollowing());

    case FOLLOW_REQUEST_SENT:
      return Boolean.valueOf(isFollowRequestSent());

    case NOTIFICATIONS:
      return getNotifications();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ID_STRING:
      return isSetIdString();
    case NAME:
      return isSetName();
    case SCREEN_NAME:
      return isSetScreenName();
    case LOCATION:
      return isSetLocation();
    case PROFILE_LOCATION:
      return isSetProfileLocation();
    case DESCRIPTION:
      return isSetDescription();
    case URL:
      return isSetUrl();
    case ENTITIES:
      return isSetEntities();
    case PROTECT:
      return isSetProtect();
    case FOLLOWERS_COUNT:
      return isSetFollowersCount();
    case FRIENDS_COUNT:
      return isSetFriendsCount();
    case LISTED_COUNT:
      return isSetListedCount();
    case CREATED_AT:
      return isSetCreatedAt();
    case FAVOURITES_COUNT:
      return isSetFavouritesCount();
    case UTC_OFFSET:
      return isSetUtcOffset();
    case TIME_ZONE:
      return isSetTimeZone();
    case GEO_ENABLED:
      return isSetGeoEnabled();
    case VERIFIED:
      return isSetVerified();
    case STATUSES_COUNT:
      return isSetStatusesCount();
    case LANG:
      return isSetLang();
    case CONTRIBUTORS_ENABLED:
      return isSetContributorsEnabled();
    case IS_TRANSLATOR:
      return isSetIsTranslator();
    case IS_TRANSLATION_ENABLED:
      return isSetIsTranslationEnabled();
    case PROFILE_BACKGROUND_COLOR:
      return isSetProfileBackgroundColor();
    case PROFILE_BACKGROUND_IMAGE_URL:
      return isSetProfileBackgroundImageUrl();
    case PROFILE_BACKGROUND_IMAGE_URL_HTTPS:
      return isSetProfileBackgroundImageUrlHttps();
    case PROFILE_BACKGROUND_TITLE:
      return isSetProfileBackgroundTitle();
    case PROFILE_IMAGE_URL:
      return isSetProfileImageUrl();
    case PROFILE_IMAGE_URL_HTTPS:
      return isSetProfileImageUrlHttps();
    case PROFILE_LINK_COLOR:
      return isSetProfileLinkColor();
    case PROFILE_SIDEBAR_BORDER_COLOR:
      return isSetProfileSidebarBorderColor();
    case PROFILESIDEBAR_FILL_COLOR:
      return isSetProfilesidebarFillColor();
    case PROFILE_TEXT_COLOR:
      return isSetProfileTextColor();
    case PROFILE_USE_BACKGROUND_IMAGE:
      return isSetProfileUseBackgroundImage();
    case DEFAULT_PROFILE:
      return isSetDefaultProfile();
    case DEFAULT_PROFILE_IMAGE:
      return isSetDefaultProfileImage();
    case FOLLOWING:
      return isSetFollowing();
    case FOLLOW_REQUEST_SENT:
      return isSetFollowRequestSent();
    case NOTIFICATIONS:
      return isSetNotifications();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatusUser)
      return this.equals((StatusUser)that);
    return false;
  }

  public boolean equals(StatusUser that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_idString = true && this.isSetIdString();
    boolean that_present_idString = true && that.isSetIdString();
    if (this_present_idString || that_present_idString) {
      if (!(this_present_idString && that_present_idString))
        return false;
      if (!this.idString.equals(that.idString))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_screenName = true && this.isSetScreenName();
    boolean that_present_screenName = true && that.isSetScreenName();
    if (this_present_screenName || that_present_screenName) {
      if (!(this_present_screenName && that_present_screenName))
        return false;
      if (!this.screenName.equals(that.screenName))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_profileLocation = true && this.isSetProfileLocation();
    boolean that_present_profileLocation = true && that.isSetProfileLocation();
    if (this_present_profileLocation || that_present_profileLocation) {
      if (!(this_present_profileLocation && that_present_profileLocation))
        return false;
      if (!this.profileLocation.equals(that.profileLocation))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_entities = true && this.isSetEntities();
    boolean that_present_entities = true && that.isSetEntities();
    if (this_present_entities || that_present_entities) {
      if (!(this_present_entities && that_present_entities))
        return false;
      if (!this.entities.equals(that.entities))
        return false;
    }

    boolean this_present_protect = true;
    boolean that_present_protect = true;
    if (this_present_protect || that_present_protect) {
      if (!(this_present_protect && that_present_protect))
        return false;
      if (this.protect != that.protect)
        return false;
    }

    boolean this_present_followersCount = true;
    boolean that_present_followersCount = true;
    if (this_present_followersCount || that_present_followersCount) {
      if (!(this_present_followersCount && that_present_followersCount))
        return false;
      if (this.followersCount != that.followersCount)
        return false;
    }

    boolean this_present_friendsCount = true;
    boolean that_present_friendsCount = true;
    if (this_present_friendsCount || that_present_friendsCount) {
      if (!(this_present_friendsCount && that_present_friendsCount))
        return false;
      if (this.friendsCount != that.friendsCount)
        return false;
    }

    boolean this_present_listedCount = true;
    boolean that_present_listedCount = true;
    if (this_present_listedCount || that_present_listedCount) {
      if (!(this_present_listedCount && that_present_listedCount))
        return false;
      if (this.listedCount != that.listedCount)
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_favouritesCount = true;
    boolean that_present_favouritesCount = true;
    if (this_present_favouritesCount || that_present_favouritesCount) {
      if (!(this_present_favouritesCount && that_present_favouritesCount))
        return false;
      if (this.favouritesCount != that.favouritesCount)
        return false;
    }

    boolean this_present_utcOffset = true;
    boolean that_present_utcOffset = true;
    if (this_present_utcOffset || that_present_utcOffset) {
      if (!(this_present_utcOffset && that_present_utcOffset))
        return false;
      if (this.utcOffset != that.utcOffset)
        return false;
    }

    boolean this_present_timeZone = true && this.isSetTimeZone();
    boolean that_present_timeZone = true && that.isSetTimeZone();
    if (this_present_timeZone || that_present_timeZone) {
      if (!(this_present_timeZone && that_present_timeZone))
        return false;
      if (!this.timeZone.equals(that.timeZone))
        return false;
    }

    boolean this_present_geoEnabled = true;
    boolean that_present_geoEnabled = true;
    if (this_present_geoEnabled || that_present_geoEnabled) {
      if (!(this_present_geoEnabled && that_present_geoEnabled))
        return false;
      if (this.geoEnabled != that.geoEnabled)
        return false;
    }

    boolean this_present_verified = true;
    boolean that_present_verified = true;
    if (this_present_verified || that_present_verified) {
      if (!(this_present_verified && that_present_verified))
        return false;
      if (this.verified != that.verified)
        return false;
    }

    boolean this_present_statusesCount = true;
    boolean that_present_statusesCount = true;
    if (this_present_statusesCount || that_present_statusesCount) {
      if (!(this_present_statusesCount && that_present_statusesCount))
        return false;
      if (this.statusesCount != that.statusesCount)
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_contributorsEnabled = true;
    boolean that_present_contributorsEnabled = true;
    if (this_present_contributorsEnabled || that_present_contributorsEnabled) {
      if (!(this_present_contributorsEnabled && that_present_contributorsEnabled))
        return false;
      if (this.contributorsEnabled != that.contributorsEnabled)
        return false;
    }

    boolean this_present_isTranslator = true;
    boolean that_present_isTranslator = true;
    if (this_present_isTranslator || that_present_isTranslator) {
      if (!(this_present_isTranslator && that_present_isTranslator))
        return false;
      if (this.isTranslator != that.isTranslator)
        return false;
    }

    boolean this_present_isTranslationEnabled = true;
    boolean that_present_isTranslationEnabled = true;
    if (this_present_isTranslationEnabled || that_present_isTranslationEnabled) {
      if (!(this_present_isTranslationEnabled && that_present_isTranslationEnabled))
        return false;
      if (this.isTranslationEnabled != that.isTranslationEnabled)
        return false;
    }

    boolean this_present_profileBackgroundColor = true && this.isSetProfileBackgroundColor();
    boolean that_present_profileBackgroundColor = true && that.isSetProfileBackgroundColor();
    if (this_present_profileBackgroundColor || that_present_profileBackgroundColor) {
      if (!(this_present_profileBackgroundColor && that_present_profileBackgroundColor))
        return false;
      if (!this.profileBackgroundColor.equals(that.profileBackgroundColor))
        return false;
    }

    boolean this_present_profileBackgroundImageUrl = true && this.isSetProfileBackgroundImageUrl();
    boolean that_present_profileBackgroundImageUrl = true && that.isSetProfileBackgroundImageUrl();
    if (this_present_profileBackgroundImageUrl || that_present_profileBackgroundImageUrl) {
      if (!(this_present_profileBackgroundImageUrl && that_present_profileBackgroundImageUrl))
        return false;
      if (!this.profileBackgroundImageUrl.equals(that.profileBackgroundImageUrl))
        return false;
    }

    boolean this_present_profileBackgroundImageUrlHttps = true && this.isSetProfileBackgroundImageUrlHttps();
    boolean that_present_profileBackgroundImageUrlHttps = true && that.isSetProfileBackgroundImageUrlHttps();
    if (this_present_profileBackgroundImageUrlHttps || that_present_profileBackgroundImageUrlHttps) {
      if (!(this_present_profileBackgroundImageUrlHttps && that_present_profileBackgroundImageUrlHttps))
        return false;
      if (!this.profileBackgroundImageUrlHttps.equals(that.profileBackgroundImageUrlHttps))
        return false;
    }

    boolean this_present_profileBackgroundTitle = true;
    boolean that_present_profileBackgroundTitle = true;
    if (this_present_profileBackgroundTitle || that_present_profileBackgroundTitle) {
      if (!(this_present_profileBackgroundTitle && that_present_profileBackgroundTitle))
        return false;
      if (this.profileBackgroundTitle != that.profileBackgroundTitle)
        return false;
    }

    boolean this_present_profileImageUrl = true && this.isSetProfileImageUrl();
    boolean that_present_profileImageUrl = true && that.isSetProfileImageUrl();
    if (this_present_profileImageUrl || that_present_profileImageUrl) {
      if (!(this_present_profileImageUrl && that_present_profileImageUrl))
        return false;
      if (!this.profileImageUrl.equals(that.profileImageUrl))
        return false;
    }

    boolean this_present_profileImageUrlHttps = true && this.isSetProfileImageUrlHttps();
    boolean that_present_profileImageUrlHttps = true && that.isSetProfileImageUrlHttps();
    if (this_present_profileImageUrlHttps || that_present_profileImageUrlHttps) {
      if (!(this_present_profileImageUrlHttps && that_present_profileImageUrlHttps))
        return false;
      if (!this.profileImageUrlHttps.equals(that.profileImageUrlHttps))
        return false;
    }

    boolean this_present_profileLinkColor = true && this.isSetProfileLinkColor();
    boolean that_present_profileLinkColor = true && that.isSetProfileLinkColor();
    if (this_present_profileLinkColor || that_present_profileLinkColor) {
      if (!(this_present_profileLinkColor && that_present_profileLinkColor))
        return false;
      if (!this.profileLinkColor.equals(that.profileLinkColor))
        return false;
    }

    boolean this_present_profileSidebarBorderColor = true && this.isSetProfileSidebarBorderColor();
    boolean that_present_profileSidebarBorderColor = true && that.isSetProfileSidebarBorderColor();
    if (this_present_profileSidebarBorderColor || that_present_profileSidebarBorderColor) {
      if (!(this_present_profileSidebarBorderColor && that_present_profileSidebarBorderColor))
        return false;
      if (!this.profileSidebarBorderColor.equals(that.profileSidebarBorderColor))
        return false;
    }

    boolean this_present_profilesidebarFillColor = true && this.isSetProfilesidebarFillColor();
    boolean that_present_profilesidebarFillColor = true && that.isSetProfilesidebarFillColor();
    if (this_present_profilesidebarFillColor || that_present_profilesidebarFillColor) {
      if (!(this_present_profilesidebarFillColor && that_present_profilesidebarFillColor))
        return false;
      if (!this.profilesidebarFillColor.equals(that.profilesidebarFillColor))
        return false;
    }

    boolean this_present_profileTextColor = true && this.isSetProfileTextColor();
    boolean that_present_profileTextColor = true && that.isSetProfileTextColor();
    if (this_present_profileTextColor || that_present_profileTextColor) {
      if (!(this_present_profileTextColor && that_present_profileTextColor))
        return false;
      if (!this.profileTextColor.equals(that.profileTextColor))
        return false;
    }

    boolean this_present_profileUseBackgroundImage = true;
    boolean that_present_profileUseBackgroundImage = true;
    if (this_present_profileUseBackgroundImage || that_present_profileUseBackgroundImage) {
      if (!(this_present_profileUseBackgroundImage && that_present_profileUseBackgroundImage))
        return false;
      if (this.profileUseBackgroundImage != that.profileUseBackgroundImage)
        return false;
    }

    boolean this_present_defaultProfile = true;
    boolean that_present_defaultProfile = true;
    if (this_present_defaultProfile || that_present_defaultProfile) {
      if (!(this_present_defaultProfile && that_present_defaultProfile))
        return false;
      if (this.defaultProfile != that.defaultProfile)
        return false;
    }

    boolean this_present_defaultProfileImage = true;
    boolean that_present_defaultProfileImage = true;
    if (this_present_defaultProfileImage || that_present_defaultProfileImage) {
      if (!(this_present_defaultProfileImage && that_present_defaultProfileImage))
        return false;
      if (this.defaultProfileImage != that.defaultProfileImage)
        return false;
    }

    boolean this_present_following = true && this.isSetFollowing();
    boolean that_present_following = true && that.isSetFollowing();
    if (this_present_following || that_present_following) {
      if (!(this_present_following && that_present_following))
        return false;
      if (this.following != that.following)
        return false;
    }

    boolean this_present_followRequestSent = true && this.isSetFollowRequestSent();
    boolean that_present_followRequestSent = true && that.isSetFollowRequestSent();
    if (this_present_followRequestSent || that_present_followRequestSent) {
      if (!(this_present_followRequestSent && that_present_followRequestSent))
        return false;
      if (this.followRequestSent != that.followRequestSent)
        return false;
    }

    boolean this_present_notifications = true && this.isSetNotifications();
    boolean that_present_notifications = true && that.isSetNotifications();
    if (this_present_notifications || that_present_notifications) {
      if (!(this_present_notifications && that_present_notifications))
        return false;
      if (!this.notifications.equals(that.notifications))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatusUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdString()).compareTo(other.isSetIdString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idString, other.idString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreenName()).compareTo(other.isSetScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenName, other.screenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileLocation()).compareTo(other.isSetProfileLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileLocation, other.profileLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtect()).compareTo(other.isSetProtect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protect, other.protect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowersCount()).compareTo(other.isSetFollowersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followersCount, other.followersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriendsCount()).compareTo(other.isSetFriendsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriendsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendsCount, other.friendsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListedCount()).compareTo(other.isSetListedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listedCount, other.listedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavouritesCount()).compareTo(other.isSetFavouritesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavouritesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favouritesCount, other.favouritesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtcOffset()).compareTo(other.isSetUtcOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtcOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utcOffset, other.utcOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeZone()).compareTo(other.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeZone, other.timeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoEnabled()).compareTo(other.isSetGeoEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoEnabled, other.geoEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerified()).compareTo(other.isSetVerified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verified, other.verified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusesCount()).compareTo(other.isSetStatusesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusesCount, other.statusesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContributorsEnabled()).compareTo(other.isSetContributorsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContributorsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contributorsEnabled, other.contributorsEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTranslator()).compareTo(other.isSetIsTranslator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTranslator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTranslator, other.isTranslator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTranslationEnabled()).compareTo(other.isSetIsTranslationEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTranslationEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTranslationEnabled, other.isTranslationEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileBackgroundColor()).compareTo(other.isSetProfileBackgroundColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileBackgroundColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileBackgroundColor, other.profileBackgroundColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileBackgroundImageUrl()).compareTo(other.isSetProfileBackgroundImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileBackgroundImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileBackgroundImageUrl, other.profileBackgroundImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileBackgroundImageUrlHttps()).compareTo(other.isSetProfileBackgroundImageUrlHttps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileBackgroundImageUrlHttps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileBackgroundImageUrlHttps, other.profileBackgroundImageUrlHttps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileBackgroundTitle()).compareTo(other.isSetProfileBackgroundTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileBackgroundTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileBackgroundTitle, other.profileBackgroundTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileImageUrl()).compareTo(other.isSetProfileImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImageUrl, other.profileImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileImageUrlHttps()).compareTo(other.isSetProfileImageUrlHttps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImageUrlHttps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileImageUrlHttps, other.profileImageUrlHttps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileLinkColor()).compareTo(other.isSetProfileLinkColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileLinkColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileLinkColor, other.profileLinkColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileSidebarBorderColor()).compareTo(other.isSetProfileSidebarBorderColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileSidebarBorderColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileSidebarBorderColor, other.profileSidebarBorderColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfilesidebarFillColor()).compareTo(other.isSetProfilesidebarFillColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfilesidebarFillColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profilesidebarFillColor, other.profilesidebarFillColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileTextColor()).compareTo(other.isSetProfileTextColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileTextColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileTextColor, other.profileTextColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfileUseBackgroundImage()).compareTo(other.isSetProfileUseBackgroundImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileUseBackgroundImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileUseBackgroundImage, other.profileUseBackgroundImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultProfile()).compareTo(other.isSetDefaultProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultProfile, other.defaultProfile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultProfileImage()).compareTo(other.isSetDefaultProfileImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultProfileImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultProfileImage, other.defaultProfileImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowing()).compareTo(other.isSetFollowing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.following, other.following);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFollowRequestSent()).compareTo(other.isSetFollowRequestSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowRequestSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followRequestSent, other.followRequestSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifications()).compareTo(other.isSetNotifications());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifications()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifications, other.notifications);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatusUser(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idString:");
    if (this.idString == null) {
      sb.append("null");
    } else {
      sb.append(this.idString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("screenName:");
    if (this.screenName == null) {
      sb.append("null");
    } else {
      sb.append(this.screenName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    if (isSetProfileLocation()) {
      if (!first) sb.append(", ");
      sb.append("profileLocation:");
      if (this.profileLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.profileLocation);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("entities:");
    if (this.entities == null) {
      sb.append("null");
    } else {
      sb.append(this.entities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protect:");
    sb.append(this.protect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("followersCount:");
    sb.append(this.followersCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("friendsCount:");
    sb.append(this.friendsCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("listedCount:");
    sb.append(this.listedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("favouritesCount:");
    sb.append(this.favouritesCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("utcOffset:");
    sb.append(this.utcOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeZone:");
    if (this.timeZone == null) {
      sb.append("null");
    } else {
      sb.append(this.timeZone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoEnabled:");
    sb.append(this.geoEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("verified:");
    sb.append(this.verified);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusesCount:");
    sb.append(this.statusesCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lang:");
    if (this.lang == null) {
      sb.append("null");
    } else {
      sb.append(this.lang);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contributorsEnabled:");
    sb.append(this.contributorsEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTranslator:");
    sb.append(this.isTranslator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTranslationEnabled:");
    sb.append(this.isTranslationEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileBackgroundColor:");
    if (this.profileBackgroundColor == null) {
      sb.append("null");
    } else {
      sb.append(this.profileBackgroundColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileBackgroundImageUrl:");
    if (this.profileBackgroundImageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.profileBackgroundImageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileBackgroundImageUrlHttps:");
    if (this.profileBackgroundImageUrlHttps == null) {
      sb.append("null");
    } else {
      sb.append(this.profileBackgroundImageUrlHttps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileBackgroundTitle:");
    sb.append(this.profileBackgroundTitle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImageUrl:");
    if (this.profileImageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImageUrlHttps:");
    if (this.profileImageUrlHttps == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImageUrlHttps);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileLinkColor:");
    if (this.profileLinkColor == null) {
      sb.append("null");
    } else {
      sb.append(this.profileLinkColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileSidebarBorderColor:");
    if (this.profileSidebarBorderColor == null) {
      sb.append("null");
    } else {
      sb.append(this.profileSidebarBorderColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profilesidebarFillColor:");
    if (this.profilesidebarFillColor == null) {
      sb.append("null");
    } else {
      sb.append(this.profilesidebarFillColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileTextColor:");
    if (this.profileTextColor == null) {
      sb.append("null");
    } else {
      sb.append(this.profileTextColor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileUseBackgroundImage:");
    sb.append(this.profileUseBackgroundImage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultProfile:");
    sb.append(this.defaultProfile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultProfileImage:");
    sb.append(this.defaultProfileImage);
    first = false;
    if (isSetFollowing()) {
      if (!first) sb.append(", ");
      sb.append("following:");
      sb.append(this.following);
      first = false;
    }
    if (isSetFollowRequestSent()) {
      if (!first) sb.append(", ");
      sb.append("followRequestSent:");
      sb.append(this.followRequestSent);
      first = false;
    }
    if (isSetNotifications()) {
      if (!first) sb.append(", ");
      sb.append("notifications:");
      if (this.notifications == null) {
        sb.append("null");
      } else {
        sb.append(this.notifications);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (idString == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'idString' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (screenName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'screenName' was not present! Struct: " + toString());
    }
    if (location == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'location' was not present! Struct: " + toString());
    }
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    if (entities == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'entities' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'protect' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'followersCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'friendsCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'listedCount' because it's a primitive and you chose the non-beans generator.
    if (createdAt == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'favouritesCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'utcOffset' because it's a primitive and you chose the non-beans generator.
    if (timeZone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeZone' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'geoEnabled' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'verified' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'statusesCount' because it's a primitive and you chose the non-beans generator.
    if (lang == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lang' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'contributorsEnabled' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isTranslator' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isTranslationEnabled' because it's a primitive and you chose the non-beans generator.
    if (profileBackgroundColor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileBackgroundColor' was not present! Struct: " + toString());
    }
    if (profileBackgroundImageUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileBackgroundImageUrl' was not present! Struct: " + toString());
    }
    if (profileBackgroundImageUrlHttps == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileBackgroundImageUrlHttps' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'profileBackgroundTitle' because it's a primitive and you chose the non-beans generator.
    if (profileImageUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileImageUrl' was not present! Struct: " + toString());
    }
    if (profileImageUrlHttps == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileImageUrlHttps' was not present! Struct: " + toString());
    }
    if (profileLinkColor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileLinkColor' was not present! Struct: " + toString());
    }
    if (profileSidebarBorderColor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileSidebarBorderColor' was not present! Struct: " + toString());
    }
    if (profilesidebarFillColor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profilesidebarFillColor' was not present! Struct: " + toString());
    }
    if (profileTextColor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileTextColor' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'profileUseBackgroundImage' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'defaultProfile' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'defaultProfileImage' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (entities != null) {
      entities.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusUserStandardSchemeFactory implements SchemeFactory {
    public StatusUserStandardScheme getScheme() {
      return new StatusUserStandardScheme();
    }
  }

  private static class StatusUserStandardScheme extends StandardScheme<StatusUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idString = iprot.readString();
              struct.setIdStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCREEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.screenName = iprot.readString();
              struct.setScreenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROFILE_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileLocation = iprot.readString();
              struct.setProfileLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entities = new StatusUserEntities();
              struct.entities.read(iprot);
              struct.setEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROTECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.protect = iprot.readBool();
              struct.setProtectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FOLLOWERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followersCount = iprot.readI32();
              struct.setFollowersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FRIENDS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friendsCount = iprot.readI32();
              struct.setFriendsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LISTED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listedCount = iprot.readI32();
              struct.setListedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FAVOURITES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.favouritesCount = iprot.readI32();
              struct.setFavouritesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UTC_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.utcOffset = iprot.readI32();
              struct.setUtcOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeZone = iprot.readString();
              struct.setTimeZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GEO_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.geoEnabled = iprot.readBool();
              struct.setGeoEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // VERIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.verified = iprot.readBool();
              struct.setVerifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STATUSES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusesCount = iprot.readI32();
              struct.setStatusesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CONTRIBUTORS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.contributorsEnabled = iprot.readBool();
              struct.setContributorsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_TRANSLATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTranslator = iprot.readBool();
              struct.setIsTranslatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_TRANSLATION_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTranslationEnabled = iprot.readBool();
              struct.setIsTranslationEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PROFILE_BACKGROUND_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileBackgroundColor = iprot.readString();
              struct.setProfileBackgroundColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PROFILE_BACKGROUND_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileBackgroundImageUrl = iprot.readString();
              struct.setProfileBackgroundImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PROFILE_BACKGROUND_IMAGE_URL_HTTPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileBackgroundImageUrlHttps = iprot.readString();
              struct.setProfileBackgroundImageUrlHttpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PROFILE_BACKGROUND_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.profileBackgroundTitle = iprot.readBool();
              struct.setProfileBackgroundTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PROFILE_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileImageUrl = iprot.readString();
              struct.setProfileImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PROFILE_IMAGE_URL_HTTPS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileImageUrlHttps = iprot.readString();
              struct.setProfileImageUrlHttpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PROFILE_LINK_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileLinkColor = iprot.readString();
              struct.setProfileLinkColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PROFILE_SIDEBAR_BORDER_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileSidebarBorderColor = iprot.readString();
              struct.setProfileSidebarBorderColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PROFILESIDEBAR_FILL_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profilesidebarFillColor = iprot.readString();
              struct.setProfilesidebarFillColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PROFILE_TEXT_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profileTextColor = iprot.readString();
              struct.setProfileTextColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PROFILE_USE_BACKGROUND_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.profileUseBackgroundImage = iprot.readBool();
              struct.setProfileUseBackgroundImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DEFAULT_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.defaultProfile = iprot.readBool();
              struct.setDefaultProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // DEFAULT_PROFILE_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.defaultProfileImage = iprot.readBool();
              struct.setDefaultProfileImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // FOLLOWING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.following = iprot.readBool();
              struct.setFollowingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // FOLLOW_REQUEST_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.followRequestSent = iprot.readBool();
              struct.setFollowRequestSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // NOTIFICATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifications = iprot.readString();
              struct.setNotificationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProtect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'protect' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFollowersCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'followersCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFriendsCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'friendsCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetListedCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listedCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFavouritesCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'favouritesCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUtcOffset()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'utcOffset' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGeoEnabled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoEnabled' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVerified()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'verified' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatusesCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusesCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContributorsEnabled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contributorsEnabled' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsTranslator()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTranslator' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsTranslationEnabled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTranslationEnabled' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProfileBackgroundTitle()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileBackgroundTitle' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProfileUseBackgroundImage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'profileUseBackgroundImage' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDefaultProfile()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultProfile' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDefaultProfileImage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultProfileImage' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.idString != null) {
        oprot.writeFieldBegin(ID_STRING_FIELD_DESC);
        oprot.writeString(struct.idString);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.screenName != null) {
        oprot.writeFieldBegin(SCREEN_NAME_FIELD_DESC);
        oprot.writeString(struct.screenName);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.location);
        oprot.writeFieldEnd();
      }
      if (struct.profileLocation != null) {
        if (struct.isSetProfileLocation()) {
          oprot.writeFieldBegin(PROFILE_LOCATION_FIELD_DESC);
          oprot.writeString(struct.profileLocation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entities != null) {
        oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
        struct.entities.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROTECT_FIELD_DESC);
      oprot.writeBool(struct.protect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FOLLOWERS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.followersCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRIENDS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.friendsCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LISTED_COUNT_FIELD_DESC);
      oprot.writeI32(struct.listedCount);
      oprot.writeFieldEnd();
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FAVOURITES_COUNT_FIELD_DESC);
      oprot.writeI32(struct.favouritesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UTC_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.utcOffset);
      oprot.writeFieldEnd();
      if (struct.timeZone != null) {
        oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
        oprot.writeString(struct.timeZone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GEO_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.geoEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERIFIED_FIELD_DESC);
      oprot.writeBool(struct.verified);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUSES_COUNT_FIELD_DESC);
      oprot.writeI32(struct.statusesCount);
      oprot.writeFieldEnd();
      if (struct.lang != null) {
        oprot.writeFieldBegin(LANG_FIELD_DESC);
        oprot.writeString(struct.lang);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTRIBUTORS_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.contributorsEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TRANSLATOR_FIELD_DESC);
      oprot.writeBool(struct.isTranslator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TRANSLATION_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.isTranslationEnabled);
      oprot.writeFieldEnd();
      if (struct.profileBackgroundColor != null) {
        oprot.writeFieldBegin(PROFILE_BACKGROUND_COLOR_FIELD_DESC);
        oprot.writeString(struct.profileBackgroundColor);
        oprot.writeFieldEnd();
      }
      if (struct.profileBackgroundImageUrl != null) {
        oprot.writeFieldBegin(PROFILE_BACKGROUND_IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.profileBackgroundImageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.profileBackgroundImageUrlHttps != null) {
        oprot.writeFieldBegin(PROFILE_BACKGROUND_IMAGE_URL_HTTPS_FIELD_DESC);
        oprot.writeString(struct.profileBackgroundImageUrlHttps);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROFILE_BACKGROUND_TITLE_FIELD_DESC);
      oprot.writeBool(struct.profileBackgroundTitle);
      oprot.writeFieldEnd();
      if (struct.profileImageUrl != null) {
        oprot.writeFieldBegin(PROFILE_IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.profileImageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.profileImageUrlHttps != null) {
        oprot.writeFieldBegin(PROFILE_IMAGE_URL_HTTPS_FIELD_DESC);
        oprot.writeString(struct.profileImageUrlHttps);
        oprot.writeFieldEnd();
      }
      if (struct.profileLinkColor != null) {
        oprot.writeFieldBegin(PROFILE_LINK_COLOR_FIELD_DESC);
        oprot.writeString(struct.profileLinkColor);
        oprot.writeFieldEnd();
      }
      if (struct.profileSidebarBorderColor != null) {
        oprot.writeFieldBegin(PROFILE_SIDEBAR_BORDER_COLOR_FIELD_DESC);
        oprot.writeString(struct.profileSidebarBorderColor);
        oprot.writeFieldEnd();
      }
      if (struct.profilesidebarFillColor != null) {
        oprot.writeFieldBegin(PROFILESIDEBAR_FILL_COLOR_FIELD_DESC);
        oprot.writeString(struct.profilesidebarFillColor);
        oprot.writeFieldEnd();
      }
      if (struct.profileTextColor != null) {
        oprot.writeFieldBegin(PROFILE_TEXT_COLOR_FIELD_DESC);
        oprot.writeString(struct.profileTextColor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROFILE_USE_BACKGROUND_IMAGE_FIELD_DESC);
      oprot.writeBool(struct.profileUseBackgroundImage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_PROFILE_FIELD_DESC);
      oprot.writeBool(struct.defaultProfile);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_PROFILE_IMAGE_FIELD_DESC);
      oprot.writeBool(struct.defaultProfileImage);
      oprot.writeFieldEnd();
      if (struct.isSetFollowing()) {
        oprot.writeFieldBegin(FOLLOWING_FIELD_DESC);
        oprot.writeBool(struct.following);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFollowRequestSent()) {
        oprot.writeFieldBegin(FOLLOW_REQUEST_SENT_FIELD_DESC);
        oprot.writeBool(struct.followRequestSent);
        oprot.writeFieldEnd();
      }
      if (struct.notifications != null) {
        if (struct.isSetNotifications()) {
          oprot.writeFieldBegin(NOTIFICATIONS_FIELD_DESC);
          oprot.writeString(struct.notifications);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusUserTupleSchemeFactory implements SchemeFactory {
    public StatusUserTupleScheme getScheme() {
      return new StatusUserTupleScheme();
    }
  }

  private static class StatusUserTupleScheme extends TupleScheme<StatusUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeString(struct.idString);
      oprot.writeString(struct.name);
      oprot.writeString(struct.screenName);
      oprot.writeString(struct.location);
      oprot.writeString(struct.description);
      struct.entities.write(oprot);
      oprot.writeBool(struct.protect);
      oprot.writeI32(struct.followersCount);
      oprot.writeI32(struct.friendsCount);
      oprot.writeI32(struct.listedCount);
      oprot.writeString(struct.createdAt);
      oprot.writeI32(struct.favouritesCount);
      oprot.writeI32(struct.utcOffset);
      oprot.writeString(struct.timeZone);
      oprot.writeBool(struct.geoEnabled);
      oprot.writeBool(struct.verified);
      oprot.writeI32(struct.statusesCount);
      oprot.writeString(struct.lang);
      oprot.writeBool(struct.contributorsEnabled);
      oprot.writeBool(struct.isTranslator);
      oprot.writeBool(struct.isTranslationEnabled);
      oprot.writeString(struct.profileBackgroundColor);
      oprot.writeString(struct.profileBackgroundImageUrl);
      oprot.writeString(struct.profileBackgroundImageUrlHttps);
      oprot.writeBool(struct.profileBackgroundTitle);
      oprot.writeString(struct.profileImageUrl);
      oprot.writeString(struct.profileImageUrlHttps);
      oprot.writeString(struct.profileLinkColor);
      oprot.writeString(struct.profileSidebarBorderColor);
      oprot.writeString(struct.profilesidebarFillColor);
      oprot.writeString(struct.profileTextColor);
      oprot.writeBool(struct.profileUseBackgroundImage);
      oprot.writeBool(struct.defaultProfile);
      oprot.writeBool(struct.defaultProfileImage);
      BitSet optionals = new BitSet();
      if (struct.isSetProfileLocation()) {
        optionals.set(0);
      }
      if (struct.isSetUrl()) {
        optionals.set(1);
      }
      if (struct.isSetFollowing()) {
        optionals.set(2);
      }
      if (struct.isSetFollowRequestSent()) {
        optionals.set(3);
      }
      if (struct.isSetNotifications()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProfileLocation()) {
        oprot.writeString(struct.profileLocation);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetFollowing()) {
        oprot.writeBool(struct.following);
      }
      if (struct.isSetFollowRequestSent()) {
        oprot.writeBool(struct.followRequestSent);
      }
      if (struct.isSetNotifications()) {
        oprot.writeString(struct.notifications);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.idString = iprot.readString();
      struct.setIdStringIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.screenName = iprot.readString();
      struct.setScreenNameIsSet(true);
      struct.location = iprot.readString();
      struct.setLocationIsSet(true);
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      struct.entities = new StatusUserEntities();
      struct.entities.read(iprot);
      struct.setEntitiesIsSet(true);
      struct.protect = iprot.readBool();
      struct.setProtectIsSet(true);
      struct.followersCount = iprot.readI32();
      struct.setFollowersCountIsSet(true);
      struct.friendsCount = iprot.readI32();
      struct.setFriendsCountIsSet(true);
      struct.listedCount = iprot.readI32();
      struct.setListedCountIsSet(true);
      struct.createdAt = iprot.readString();
      struct.setCreatedAtIsSet(true);
      struct.favouritesCount = iprot.readI32();
      struct.setFavouritesCountIsSet(true);
      struct.utcOffset = iprot.readI32();
      struct.setUtcOffsetIsSet(true);
      struct.timeZone = iprot.readString();
      struct.setTimeZoneIsSet(true);
      struct.geoEnabled = iprot.readBool();
      struct.setGeoEnabledIsSet(true);
      struct.verified = iprot.readBool();
      struct.setVerifiedIsSet(true);
      struct.statusesCount = iprot.readI32();
      struct.setStatusesCountIsSet(true);
      struct.lang = iprot.readString();
      struct.setLangIsSet(true);
      struct.contributorsEnabled = iprot.readBool();
      struct.setContributorsEnabledIsSet(true);
      struct.isTranslator = iprot.readBool();
      struct.setIsTranslatorIsSet(true);
      struct.isTranslationEnabled = iprot.readBool();
      struct.setIsTranslationEnabledIsSet(true);
      struct.profileBackgroundColor = iprot.readString();
      struct.setProfileBackgroundColorIsSet(true);
      struct.profileBackgroundImageUrl = iprot.readString();
      struct.setProfileBackgroundImageUrlIsSet(true);
      struct.profileBackgroundImageUrlHttps = iprot.readString();
      struct.setProfileBackgroundImageUrlHttpsIsSet(true);
      struct.profileBackgroundTitle = iprot.readBool();
      struct.setProfileBackgroundTitleIsSet(true);
      struct.profileImageUrl = iprot.readString();
      struct.setProfileImageUrlIsSet(true);
      struct.profileImageUrlHttps = iprot.readString();
      struct.setProfileImageUrlHttpsIsSet(true);
      struct.profileLinkColor = iprot.readString();
      struct.setProfileLinkColorIsSet(true);
      struct.profileSidebarBorderColor = iprot.readString();
      struct.setProfileSidebarBorderColorIsSet(true);
      struct.profilesidebarFillColor = iprot.readString();
      struct.setProfilesidebarFillColorIsSet(true);
      struct.profileTextColor = iprot.readString();
      struct.setProfileTextColorIsSet(true);
      struct.profileUseBackgroundImage = iprot.readBool();
      struct.setProfileUseBackgroundImageIsSet(true);
      struct.defaultProfile = iprot.readBool();
      struct.setDefaultProfileIsSet(true);
      struct.defaultProfileImage = iprot.readBool();
      struct.setDefaultProfileImageIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.profileLocation = iprot.readString();
        struct.setProfileLocationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.following = iprot.readBool();
        struct.setFollowingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.followRequestSent = iprot.readBool();
        struct.setFollowRequestSentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.notifications = iprot.readString();
        struct.setNotificationsIsSet(true);
      }
    }
  }

}

